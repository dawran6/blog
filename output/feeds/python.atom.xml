<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Daw-Ran Liou's Blog - Python</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/python.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2017-02-20T00:00:00-08:00</updated><entry><title>Getting Start with Python Internals</title><link href="http://localhost:8000/getting-start-python-internals.html" rel="alternate"></link><published>2017-02-20T00:00:00-08:00</published><updated>2017-02-20T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2017-02-20:/getting-start-python-internals.html</id><summary type="html">&lt;p&gt;How to start exploring Python internals&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This article is a summary of what I learned from Philip Guo's 
&lt;a href="http://pgbovine.net/cpython-internals.htm"&gt;CPython internals: A ten-hour codewalk through the Python interpreter source code&lt;/a&gt;.
In this article, you'll know the very basic things to the Python internals,
and, hopefully, be able to explore the Python internals on your own.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Interpreter and Source Code Overview&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source code   |                (C)Python                   |       output
              |                                            |
  test.py     ---&amp;gt;  compiler -&amp;gt; [bytecode] -&amp;gt; interpreter  ---&amp;gt; &amp;#39;Hello World!&amp;#39;
                                    ^                                ^
                                    |                                |
                                    |                                |
                                    ----------------------------------
                                        This is more interesting
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Python sourcecode tree&lt;/h2&gt;
&lt;p&gt;Main subdirectories:
1. &lt;code&gt;Include/&lt;/code&gt; - all the .h files
1. &lt;code&gt;Objects/&lt;/code&gt; - all the .c files representing python objects
1. &lt;code&gt;Python/&lt;/code&gt; - the main runtime&lt;/p&gt;
&lt;p&gt;Other subdirectories:
1. &lt;code&gt;Modules/&lt;/code&gt; - built-in modules implemented in C
1. &lt;code&gt;Libs/&lt;/code&gt; - standard libraries implemented in Python&lt;/p&gt;
&lt;h1&gt;Lecture 2 - Opcodes and main interpreter loop&lt;/h1&gt;
&lt;p&gt;Focusing on two files:
1. /include/opcode.h
1. /Python/ceval.c&lt;/p&gt;
&lt;h2&gt;Opcodes&lt;/h2&gt;
&lt;p&gt;Our testing module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Built-in function: &lt;code&gt;compile&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;code object &amp;lt;module&amp;gt; at 0x..., file &amp;quot;test.py&amp;quot;, line 1&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;e\x00\x00j\x01\x00\x01d\x00\x00S&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;#39;e&amp;#39;, &amp;#39;\x00&amp;#39;, &amp;#39;\x00&amp;#39;, &amp;#39;j&amp;#39;, &amp;#39;\x01&amp;#39;, &amp;#39;\x00&amp;#39;, &amp;#39;\x01&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;\x00&amp;#39;, &amp;#39;\x00&amp;#39;, &amp;#39;S&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;# ascii code for each byte&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# [101, 0, 0, 106, 1, 0, 1, 100, 0, 0, 83]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disassemble python code: &lt;code&gt;$ python -m dis test.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  1           0 LOAD_CONST               0 (1)
              3 STORE_NAME               0 (x)

  2           6 LOAD_CONST               1 (2)
              9 STORE_NAME               1 (y)

  3          12 LOAD_NAME                0 (x)
             15 LOAD_NAME                1 (y)
             18 BINARY_ADD
             19 STORE_NAME               2 (z)

  4          22 LOAD_NAME                2 (z)
             25 PRINT_ITEM
             26 PRINT_NEWLINE
             27 LOAD_CONST               2 (None)
             30 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;The standard library module &lt;code&gt;dis&lt;/code&gt; can be found at &lt;code&gt;/Python-2.7.8/Lib/dis.py&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The byte code is mapped to the disassembled code, somehow, with some
optimization. The disassembler knows how to read the byte code.&lt;/p&gt;
&lt;p&gt;The format for the disassmbled code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LINE_NUMBER -&amp;gt; BYTE_OFFSET OP_CODE -&amp;gt; INTERNAL_BOOK_KEEPING_STUFF ARGUMENT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's look at &lt;code&gt;opcode.h&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define LOAD_CONST  100 &lt;/span&gt;&lt;span class="cm"&gt;/* Index in const list */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Any opcode above 90 takes an argument&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;HAVE_ARGUMENT&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;  &lt;span class="cm"&gt;/* Opcodes from here have an argument: */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is stored in to the 0th variable name in &lt;code&gt;3 STORE_NAME 0 (x)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;byteplay&lt;/code&gt; is a module which lets you easily play with Python bytecode.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python virtual machine is a "Stack Machine." When a const is loaded by 
calling &lt;code&gt;LOAD_CONST&lt;/code&gt;, the
value is pushed onto the "Value Stack." When the &lt;code&gt;STORE_NAME&lt;/code&gt; is called,
the last value on the Value Stack is popped and saved in the memory
associated with the variable name, &lt;code&gt;x&lt;/code&gt; for example.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOAD_NAME&lt;/code&gt; pushes whatever value the variable name is associated with
on top of the Value Stack. (Only the reference of the value is pushed.
So now the value has the Reference Counting of 2. One from the variable
name, another from the Value Stack.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BINARY_ADD&lt;/code&gt; pops the two values from the Value Stack and pushs the
result on top of the Value Stack again. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;PRINT_ITEM&lt;/code&gt; is a primitive operation in legacy Python (Python 2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For completeness, the module returns a &lt;code&gt;None&lt;/code&gt; value.&lt;/p&gt;
&lt;h2&gt;Main Interpreter Loop&lt;/h2&gt;
&lt;p&gt;From &lt;code&gt;ceval.c&lt;/code&gt; line 693 to line 3021, this is the main interpreter loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;PyEval_EvalFrameEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyFrameObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;throwflag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// line 3021&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Everything in Python is an object, an &lt;code&gt;PyObject&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;PyFrameObject&lt;/code&gt; is a piece of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inside the main interpreter loop:
* &lt;code&gt;PyObject **stack_pointer&lt;/code&gt; is a list of pointers to the Value Stack.
It points to the Next free slot in value stack.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;#define&lt;/code&gt; is Macro in C. For example &lt;code&gt;#define LOAD_CONST 100&lt;/code&gt;. This macro
means to replace every occurrence of &lt;code&gt;LOAD_CONST&lt;/code&gt; with &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Line 964, Infinite loop to go through the byte code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Line 1078, extract opcode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="cm"&gt;/* Extract opcode and argument */&lt;/span&gt;

        &lt;span class="n"&gt;opcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NEXTOP&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;oparg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* allows oparg to be stored in a register because&lt;/span&gt;
&lt;span class="cm"&gt;            it doesn&amp;#39;t have to be remembered across a full loop */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Line 1112, GIANT switch case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Line 2959, breaking out of the main loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;why&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;WHY_NOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;READ_TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cm"&gt;/* main loop */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Line 3020, return retval&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retval&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="internals"></category></entry><entry><title>Closures bind late</title><link href="http://localhost:8000/closures-bind-late.html" rel="alternate"></link><published>2017-02-18T00:00:00-08:00</published><updated>2017-02-18T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2017-02-18:/closures-bind-late.html</id><summary type="html">&lt;p&gt;The behavior of closure might trick you&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt turtle" src="images/turtle.jpg"&gt;&lt;/p&gt;
&lt;p&gt;"Closure is a turtle carrying its shell," my favorite explaination to
closures, quote by &lt;a href="https://twitter.com/raymondh"&gt;Raymond Hettinger&lt;/a&gt;. 
With closures, lots of great features are possible
in Python like higher order functions and decorators. &lt;/p&gt;
&lt;p&gt;I came across this StackOverflow post - 
&lt;a href="http://stackoverflow.com/questions/42003351/how-can-i-return-a-function-that-uses-the-value-of-a-variable"&gt;How can I return a function that uses the value of a variable?&lt;/a&gt;
, which helped me bridging the gap in my knowledge,
the gap that I sort-of understood it but couldn't explain it very well. 
The bridge is just a simple sentence, "closures bind late."&lt;/p&gt;
&lt;p&gt;What does "closures bind late" mean exactly?
Consider a function generator that generates a series of multiplication
functions starting from 0 to &lt;code&gt;max&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="n"&gt;mult_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mult_functions&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Oh crap, it&amp;#39;s [6, 6, 6], not [0, 3, 6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems like all the &lt;code&gt;i&lt;/code&gt;s in the generated functions are assigned to 2,
which is the last value of &lt;code&gt;i&lt;/code&gt; after all functions were being generated.
Let's take a closer look at what's behind the scene. First of all, how does
a closure represent in Python, or, how the turtle shell looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mult_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mult_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mult_functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mult_zero&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;function ...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To look at the closure, there's a special attribute in each function called
&lt;code&gt;__closure__&lt;/code&gt; (quite obvious, huh?)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mult_zero&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__closure__&lt;/span&gt;
&lt;span class="c1"&gt;# (&amp;lt;cell at 0x..., int object at 0x...&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, we are getting closer. The &lt;code&gt;__closure__&lt;/code&gt; attribute is a tuple of &lt;code&gt;cell&lt;/code&gt;
objects. Let's see what's inside the cell, which has an attribute
&lt;code&gt;cell_contents&lt;/code&gt; to help us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cell_zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mult_zero&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__closure__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cell_zero&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cell_contents&lt;/span&gt;
&lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bingo! This is the int object &lt;code&gt;i&lt;/code&gt; that trapped inside the function's closure.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I haven't figured out how Python find the reference of &lt;code&gt;i&lt;/code&gt; so I
won't go any further. For more discussion please refer to the Appendix
section.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The interesting thing is, the same cell object is used across our multiplication
functions. Thus, when we get the second function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mult_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mult_functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cell_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mult_one&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__closure__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cell_one&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cell_contents&lt;/span&gt;
&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="c1"&gt;# So far so good. But...&lt;/span&gt;
&lt;span class="n"&gt;cell_zero&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cell_contents&lt;/span&gt;
&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="c1"&gt;# Crap!&lt;/span&gt;
&lt;span class="n"&gt;cell_zero&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;cell_one&lt;/span&gt;
&lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;span class="c1"&gt;# Okay fine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same cell object means the same reference to &lt;code&gt;i&lt;/code&gt;. This explains what happened
in this example. Or, if you like, you could explain all this by saying, "closures
bind late." They are both correct but just with different mental models.&lt;/p&gt;
&lt;p&gt;Now we understand the problem that introduced by late binding. Let's see how to
bind the variable during function declaration. The idea is to have &lt;code&gt;i&lt;/code&gt; also
be a argument passed into the lambda function and then we assign the value
immediately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or if you like partial functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or my favorite one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mult_function_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last one works because default arguments is assigned when the 
function is defined.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;My favorite example for taking advantage of the late binding closure
is from &lt;a href="https://www.oreilly.com/learning/20-python-libraries-you-arent-using-but-should"&gt;20 Python libraries you aren't using (but should)&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;perf_counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;array&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array creation innermul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Array creation outermul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Total [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;]: &lt;/span&gt;&lt;span class="si"&gt;%.6f&lt;/span&gt;&lt;span class="s1"&gt; s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    Timing [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;]: &lt;/span&gt;&lt;span class="si"&gt;%.6f&lt;/span&gt;&lt;span class="s1"&gt; s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    Timing [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;]: &lt;/span&gt;&lt;span class="si"&gt;%.6f&lt;/span&gt;&lt;span class="s1"&gt; s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Total [Array tests]: 0.064896 s&lt;/span&gt;
&lt;span class="c1"&gt;#    Timing [Array creation innermul]: 0.064195 s&lt;/span&gt;
&lt;span class="c1"&gt;#    Timing [Array creation outermul]: 0.000659 s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Appendix - discussion on loading a dereferenced variable&lt;/h3&gt;
&lt;p&gt;Take the &lt;code&gt;mult_zero&lt;/code&gt; function for example. The disambled code looks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;LOAD_DEREF&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;BINARY_MULTIPLY&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second line calls the &lt;code&gt;LOAD_DEREF&lt;/code&gt; op code in Python. My guess
is that the name &lt;code&gt;i&lt;/code&gt; was never dereferenced because the cell object
still holds a reference on it. However, &lt;code&gt;i&lt;/code&gt; must be treated specially
since &lt;code&gt;i&lt;/code&gt; isn't visible to the scope outside the closure functions.
My next move will be looking into the CPython code to see how this
op code works exactly.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Generator - The Basics</title><link href="http://localhost:8000/generator-the-basics.html" rel="alternate"></link><published>2017-01-07T00:00:00-08:00</published><updated>2017-01-07T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2017-01-07:/generator-the-basics.html</id><summary type="html">&lt;p&gt;These are the basic things you need to know about generators and how to use it to crack some algorithm problems&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;I've been wanting to write articles about generators for quite some time.
Generator is definitely one of my favorate features in Python. Ever since I stopped treating
Python like other programming languages, e.g. Java or C++,
I start having so much fun writing codes.
Unlike other very powerful features (decorators, 
context managers, or classes) that I sometimes abused a lot, Generators don't
ever seemed to be too much in my code. They have strong purpose in the code, and are very
beautiful in the codes. In this article, I'll explain the basics things about generators.
At the end, I'll show you how to use it to solve some problems.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;1. Why do I need to know generators?&lt;/h1&gt;
&lt;p&gt;There're two categories of use cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To generate a series of data&lt;/li&gt;
&lt;li&gt;To pause code execution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For category #1, you might think &lt;em&gt;"why we need another tool while we already
know how to write lists to store a series of data?"&lt;/em&gt; There are three reasons:
1) list can't solve all problems, 2) performance, and 3) code style. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List can't solve all problems. In the cases that we have a infinite 
series of data (e.g. generating prime numbers,) or the series of data 
that we can't tell when it'll stop (e.g. parsing log files that still are adding more
entries,) there's no easy way to extract this part of code into
a function that returns a list. On the other hand, generators are perfectly fine 
for these jobs.&lt;/li&gt;
&lt;li&gt;Performance. Space-wise, if the data series consumer just need one data point
at a time, why waste the memory to hold the entire copy of the data series? Time-wise,
if the data consumer does not require all the data to be present to do the next
thing, why waste time to wait till all data are at hand while you can pass on the
data to do work at the same time? Generators are good for both cases.&lt;/li&gt;
&lt;li&gt;Code style. This is a bit opinionative. I feel coding with generators is usually cleaner and
easier to understand then functions without them. Also opinionative, usually a generator code is
a hint of outputing a series of data. Therefore, I have some idea of what the
code is doing even without looking at the code line-by-line.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For category #2, this is something very powerful. Normal functions, or
called subroutines, execute line by line till they &lt;code&gt;return&lt;/code&gt; control to
the caller. Generators, or a coroutine, execute till they &lt;code&gt;yield&lt;/code&gt; a value
to the caller and pause the current state untill their caller invoke them
again to resume the execution. My favorite examples for this case is the
&lt;code&gt;@contextlib.contextmanager&lt;/code&gt; decorator in &lt;a href="https://www.oreilly.com/learning/20-python-libraries-you-arent-using-but-should#contextlib-ZKsPtpTX"&gt;20 Python libraries you aren't using (but should)&lt;/a&gt;
and also David Beazley's incredible live demo in PyCon 2015 -&lt;a href="https://www.youtube.com/watch?v=MCs5OvhV9S4"&gt;Python Concurrency From the Ground Up: LIVE!&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;2. What are generators?&lt;/h1&gt;
&lt;p&gt;Python's generator is a special case of &lt;a href="https://en.wikipedia.org/wiki/Coroutine"&gt;coroutine&lt;/a&gt;.
If looking at the proper definition gives you an headache, my way of understanding
it is - &lt;em&gt;generators are functions that don't return&lt;/em&gt;. I admit there are many
flaws in my definition, but this definition helps me to understand some key
concepts. Ask yourself a question, &lt;em&gt;what does &lt;code&gt;return&lt;/code&gt; mean?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt; means to return control to the caller. Python virtual machine is a
stack machine. When a function is called, a frame object is PUSH onto the
execution stack. This frame object is a mini enviroment for the function.
Having this enclosing mini environment, the function could have its own
variables without worring about variable names colliding with the outter
environment. When the funtion returns, the frame object is POPPED from the
stack. All the variables sitting inside the mini environment are gone. The
caller regains full control and continues.&lt;/p&gt;
&lt;p&gt;Generators, however, do not return full control to the caller. Instead, they
pause (or yield.) Thus, the mini enviroment of the generators, are still
sitting somewhere in the memory, waiting to be invoked.&lt;/p&gt;
&lt;p&gt;Before I bored you to death with all the discriptions, let's see some code
example.&lt;/p&gt;
&lt;p&gt;Just like functions are objects in Python, generators are also objects.
They are special objects that looks very similar to regular function 
definitions but behaves very differently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_generator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a_generator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;a_generator&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;...&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When generator objects are created, they don't start executing immediately.
Generator objects, like &lt;code&gt;a_generator()&lt;/code&gt;, follow the Iterator Protocal. So
to invoke them, you can use the builtin function &lt;code&gt;next()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_generator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;StopIteration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not only do generators are iterators, they are also iterables!
(You can know more about the distinction between iterables and iterators from 
&lt;a href="https://www.youtube.com/watch?v=EnSu9hHGq5o"&gt;Ned Batchelder - Loop like a native: while, for, iterators, generators&lt;/a&gt;.)
The builtin &lt;code&gt;iter&lt;/code&gt; function call simply returns the generator itself,
which is a iterator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus, all the builtin functions and external APIs that takes iterables
as input, works for generators! &lt;em&gt;(This is one of the most exciting realization
I had while learning Python.)&lt;/em&gt; Keep this in mind. We're
counting on it for the next section.&lt;/p&gt;
&lt;h1&gt;3. How do I use generators?&lt;/h1&gt;
&lt;p&gt;Recall that I said generators are good to generate a series of data. Thus,
using generators with loops is a good idea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;best_burger_generator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bun&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;veggies&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;patty&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sause&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;onion&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bun&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doubledouble_recipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;best_burger_generator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doubledouble_recipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;veggies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;patty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;patty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sause&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;onion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or to generate an infinite series of data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perfect_24_7_drive_thru&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;doubledouble and animal fries&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;drive_thru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perfect_24_7_drive_thru&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drive_thru&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;doubledouble and animal fries&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drive_thru&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;doubledouble and animal fries&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# forever and ever satisfaction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recall what I said, generators are iterables. Thus, be confident to iterate through
them or plug them into functions that takes iterables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# loop through the generator with a for-loop&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ingredient&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;best_burger_generator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ingredient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;bun&lt;/span&gt;
&lt;span class="n"&gt;veggies&lt;/span&gt;
&lt;span class="n"&gt;patty&lt;/span&gt;
&lt;span class="c1"&gt;# rests&lt;/span&gt;

&lt;span class="c1"&gt;# use API that take an iterable&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ingredients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_burger_generator&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ingredients&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;patty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;veggies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sause&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;onion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;4. Generator in action&lt;/h1&gt;
&lt;p&gt;To demonstrate some examples using generators, I'm going to show you
how to solve problems without them, and then with them, so we could
compare the different flavors.&lt;/p&gt;
&lt;h3&gt;Fibonacci number series&lt;/h3&gt;
&lt;p&gt;Assuming we have a function to calculate the incredible series of data - the first n
fibonacci numbers. This is the recursive solution most of us learned (with caching to
get some performance):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Recursive solution to get the first 10 fibonacci numbers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;

&lt;span class="nd"&gt;@functools.lru_cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Calculate the nth fibonacci number.&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibonacci_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fibonacci_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's an iterative solution with generator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Iterative solution to get the first 10 fibonacci numbers using generator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fibonacci_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Yield the first nth fibonacci number.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fibonacci_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love recurrsion. I think they are elegent and beautiful. However, I do find
the generator version of the solution much easier for my brain. If you only
compare the &lt;code&gt;fibonacci&lt;/code&gt; function and the &lt;code&gt;fibonacci_generator&lt;/code&gt; function, the
difference may not be significant, and the coding style really depends on
personal preferences. So I say it's a draw. Let's look at other examples.&lt;/p&gt;
&lt;h3&gt;Sliding window&lt;/h3&gt;
&lt;p&gt;Given a sequence and the window size, an example of sliding window function's
input-output pair is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;'ABCDEF', size=2 -&amp;gt; 'AB', 'BC', 'CD', 'DE', 'EF'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A naive iterative solution is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sliding_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sliding_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABCDEF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A generator approach is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sliding_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sliding_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ABCDEF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example I think the generator approach is significantly better
than the other. First off, the code is much cleaner.
Second, the purpose of the sliding window function is to be consumed
by another function, one-at-a-time. Why keep duplicates hanging around in memory?&lt;/p&gt;
&lt;p&gt;Say, you have a large data set for a machine learning model.
The sliding window is used to segment the data for training and
cross validation. Data &lt;code&gt;A&lt;/code&gt; for training while &lt;code&gt;B&lt;/code&gt; for cross validation; then,
&lt;code&gt;B&lt;/code&gt; for training, &lt;code&gt;C&lt;/code&gt; for cross validation. In this case, you really don't need all the
other data while working on the current one.&lt;/p&gt;
&lt;h1&gt;5. Conclusion&lt;/h1&gt;
&lt;p&gt;Being fluent in using generators is one of the things that took
my Python to the next level. They are expressive, cleaner, and for
most of the time, more efficient.&lt;/p&gt;
&lt;h1&gt;6. Action&lt;/h1&gt;
&lt;p&gt;Next time when you're writing some Python code, if there's a function
that need to return a sequence of data, think if it make sense to refactor
it as a generator function.&lt;/p&gt;
&lt;p&gt;And for your own study, take a look at the Python official document page
&lt;a href="https://docs.python.org/3/library/itertools.html"&gt;10.1 itertools&lt;/a&gt;. There
are lots of examples of using the &lt;code&gt;yield&lt;/code&gt; expression.&lt;/p&gt;</content><category term="python"></category><category term="beginner"></category></entry><entry><title>Never Write For-Loops Again</title><link href="http://localhost:8000/never-write-for-loops.html" rel="alternate"></link><published>2016-11-17T00:00:00-08:00</published><updated>2016-11-17T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-11-17:/never-write-for-loops.html</id><summary type="html">&lt;p&gt;Challenge yourself to use awesome language features instead of for-loops&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a challenge. I challenge you to avoid writing for-loops in every scenario.
Also, I challenge you to find the scenarios that are so freaking hard to write 
anything else but a for-loop. Please share your findings. I’d like to hear about
them.&lt;/p&gt;
&lt;p&gt;It’s been a while since I started exploring the amazing language features in 
Python. At the beginning, it’s just a challenge I gave myself to practice using 
more language features instead of those I learned from other programming 
language. And things are just getting more fun! Not only the code become shorter
and cleaner, but also code looks more structured and disciplined. I’ll get into 
those benefits more in this article.&lt;/p&gt;
&lt;p&gt;But first, let’s take a step back and see what’s the intuition behind writing a 
for-loop:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To go through a sequence to extract out some information&lt;/li&gt;
&lt;li&gt;To generate another sequence out of the current sequence&lt;/li&gt;
&lt;li&gt;This is my second nature to write for-loops because I’m a programmer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fortunately, there are already great tools that are built into Python to help 
you accomplish the goals! All you need is to shift your mind and look at the 
things in a different angle.&lt;/p&gt;
&lt;h1&gt;What you gain by not writing for-loops everywhere&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Fewer lines of code&lt;/li&gt;
&lt;li&gt;Better code readability&lt;/li&gt;
&lt;li&gt;Leave indentation for managing context only&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s see the code skeleton below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, we are dealing with multiple layers of code. THIS IS HARD TO 
READ. The problem I found in this code is that it is mixing the 
&lt;strong&gt;administrative&lt;/strong&gt; logic (the &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;try-except&lt;/code&gt;) with the &lt;strong&gt;business logic&lt;/strong&gt; 
(the &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;) by giving them the indentation ubiquitously. If you are 
disciplined about using indentation only for administrative logic, your core 
business logic would stand out immediately.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Flat is better than nested" - The Zen of Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Tools you can use to avoid using for-loops&lt;/h1&gt;
&lt;h2&gt;1. List Comprehension / Generator Expression&lt;/h2&gt;
&lt;p&gt;Let’s see a simple example. Basically you want to compile a sequence based on 
another existing sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;code&gt;map&lt;/code&gt; if you love MapReduce, or, Python has List Comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, if you wish to get a iterator only, you can use Generator Expression 
with almost the same syntax. (How can you not love the consistency in Python?)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Functions&lt;/h2&gt;
&lt;p&gt;Thinking in a higher-order, more functional programming way, if you want to map 
a sequence to another, simply call the &lt;code&gt;map&lt;/code&gt; function. (Be my guest to use list 
comprehension here instead.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doubled_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to reduce a sequence into a single, use &lt;code&gt;reduce&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="n"&gt;summation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, lots of Python's builtin functions consumes iterables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Extract Functions or Generators&lt;/h2&gt;
&lt;p&gt;The above two methods are great to deal with simpler logic. How about more 
complex logic? As a programmer, we write functions to abstract out the difficult
things. Same idea applies here. If you are writing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# setups&lt;/span&gt;
    &lt;span class="c1"&gt;# condition&lt;/span&gt;
    &lt;span class="c1"&gt;# processing&lt;/span&gt;
    &lt;span class="c1"&gt;# calculation&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apparently you are giving too much responsibility to a single code block. 
Instead, I propose you do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# setups&lt;/span&gt;
    &lt;span class="c1"&gt;# condition&lt;/span&gt;
    &lt;span class="c1"&gt;# processing&lt;/span&gt;
    &lt;span class="c1"&gt;# calculation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;process_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about nested for-loops?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;List Comprehension got your back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about if you have some internal state in the code block to
keep?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# finding the max prior to the current item&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# results = [3, 4, 6, 6, 6, 9, 9, 9, 9, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's extract a generator to achieve this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;"Oh wait, you just used a for-loop in the generator function. That's cheating!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fine, smart ass, let's try the following.&lt;/p&gt;
&lt;h2&gt;4. Don't write it yourself. &lt;code&gt;itertools&lt;/code&gt; got you covered&lt;/h2&gt;
&lt;p&gt;This module is simply brilliant. I believe this module covers 80% of the cases 
that you makes you want to write for-loops. For example, the last example can be
rewritten to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;accumulate&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;resutls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, if you are iterating on combinatoric sequnces, there are &lt;code&gt;product()&lt;/code&gt;, 
&lt;code&gt;permutations()&lt;/code&gt;, &lt;code&gt;combinations()&lt;/code&gt; to use.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;You don’t need to write for-loops in most scenarios&lt;/li&gt;
&lt;li&gt;You should avoid writing for-loops, so you have better code readability&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Action&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Look at your code again. Spot any places that you wrote a for-loop previously
by intuition. Think again and see if it make sense to re-write it without using 
for-loop.&lt;/li&gt;
&lt;li&gt;Share your cases that are hard to code without using for-loops&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;This &lt;a href="https://medium.com/@dawran6/never-write-for-loops-again-91a5a4c84baf"&gt;article&lt;/a&gt; was originally posted in my &lt;a href="https://medium.com/@dawran6"&gt;Medium blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><category term="python"></category><category term="best-practice"></category><category term="tip"></category></entry><entry><title>Twitter scraper tutorial with Python: Requests, BeautifulSoup, and Selenium — Part 2</title><link href="http://localhost:8000/twitter-scraper-2.html" rel="alternate"></link><published>2016-04-09T10:20:00-07:00</published><updated>2016-04-09T10:20:00-07:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-04-09:/twitter-scraper-2.html</id><summary type="html">&lt;p&gt;Twitter scrapper tutorial&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by Bruce, my friend’s take-home interview question, I started this 
bite-size project to play around with some of the most popular PyPI packages: 
Requests, BeautifulSoup, and Selenium. In this tutorial, I’ll show you the 
step-by-step process of how I build a Twitter Search web scraper without using 
their REST API.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is the part 2 of my Twitter scraper tutorial. If you haven’t checkout part 
1, the link is right here. In the last part, I left the tutorial with an unsolved
problem — how to scrape the web page that uses infinite scrolling design? Two 
solutions came into my mind: one more sophisticated, the other more naive:&lt;/p&gt;
&lt;h1&gt;The more sophisticated approach&lt;/h1&gt;
&lt;p&gt;In this approach, you need to understand how the infinite scrolling works. In 
the case of this tutorial, when the tweet search page loaded, none of the tweets
contents were loaded at the time. It is the frontend javascript code that sends 
the HTTP request to get tweets from the server asynchronously, and manipulates 
the HTML file to render those tweets. This technology is called AJAX. You may 
find more information online if you are interested.&lt;/p&gt;
&lt;p&gt;Anyways, do you spot the flaw in the approach of part 1? The original HTTP 
request wasn’t the right request to get the tweets! It merely loads a page with 
right the javascript code, which load the tweets on the fly. So listen carefully:
If you are able to track down the right HTTP request object, which gets the 
tweets result, the only thing left is to replace the original request with this 
one. Voila! This is my so-called more sophisticated approach. However, I didn’t 
go with this approach simply I didn’t spend the time to :P&lt;/p&gt;
&lt;h1&gt;The more naive approach&lt;/h1&gt;
&lt;p&gt;Okay! This is the approach I want to show you. Think about the problem this way:
no matter how sophisticated the website is designed, the end result is still a 
list of tweets loaded on your browser. So my so-called more naive approach is to
focus on the end result only. if we could manipulate the browser to load those 
tweets for me, just as what we see normally, we could use the same the knowledge
to parse the HTML file and get the tweets. To automate the browser for us, I’ll 
show you how I used Selenium.&lt;/p&gt;
&lt;p&gt;“Selenium automates browsers.” That’s what the official website says. Selenium 
Python bindings will help us to use Selenium using Python. Follow the 
installation page to install it. The code below tells Selenium to use Chrome to 
open up the Twitter search page and then move down the page for 5 times. Since 
the browser object provides the handy API to locate the tweets, we don’t need to
use the BeautifulSoup again to parse the HTML file. You may run the script now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;https://twitter.com/search?q=&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%40d&lt;/span&gt;&lt;span class="s1"&gt;awranliou&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_tag_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAGE_DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tweet-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;selenium.common.exceptions.WebDriverException: Message: 'chromedriver'
executable needs to be in PATH. Please see
https://sites.google.com/a/chromium.org/chromedriver/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Don’t panic. Read the error message (don’t just google it blindly) and what’s 
wrong is that you are missing the ‘chromedriver’ executable file. It also 
suggest you to go to the website. How nice it is! Download the executable from 
the website given and put it under one of your PATH loacation. For me, I put it 
under my /usr/local/bin/ folder. You should be fine to run the script by now.&lt;/p&gt;
&lt;p&gt;This is the end of this tutorial! Hope you enjoy working with these amazing PyPI
packages. Feel free to comment or contact me if you want to learn more. Happy 
learning! Cheers!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Twitter scraper tutorial with Python: Requests, BeautifulSoup, and Selenium — Part 1</title><link href="http://localhost:8000/twitter-scraper-1.html" rel="alternate"></link><published>2016-03-26T10:20:00-07:00</published><updated>2016-03-26T10:20:00-07:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-03-26:/twitter-scraper-1.html</id><summary type="html">&lt;p&gt;Twitter scrapper tutorial&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by Bruce, my friend’s take-home interview question, I started this 
bite-size project to play around with some of the most popular PyPI packages: 
Requests, BeautifulSoup, and Selenium. In this tutorial, I’ll show you the 
step-by-step process of how I build a Twitter Search web scraper without using 
their REST API.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;“Well, why not use their API?”&lt;/em&gt; you might ask. I have two reasons:&lt;/p&gt;
&lt;p&gt;Not all the websites expose REST APIs to clients. In order to retrieve data from 
those websites in a programmatic way, it’s good to know how to do web scrapping.&lt;/p&gt;
&lt;p&gt;To use Twitter’s APIs, you’ll need OAuth to authenticate your application. I was 
just too lazy to figure that out at the time. (Yeah, I’ll figure it out and post 
another tutorial on that.)&lt;/p&gt;
&lt;p&gt;Here we go! Fire up your favorite browser and go to the url: 
https://twitter.com/search-home. You’ll see a text box in the middle. That’s 
where we begin. Try typing in something that you want to search and see what 
happens. For me, I want to search for all tweets from my twitter account, 
@dawranliou. So I typed it in and hit enter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt twitter-search-landing-page" src="/images/twitter-search-landing-page.png"&gt;&lt;/p&gt;
&lt;p&gt;In the next page, you can see a list of tweets. Let’s make our first note here: 
what’s the current url? For my search results, it is 
https://twitter.com/search?q=%40dawranliou. This url is important since the 
python application we are writing will need it to retrieve the same data we are 
viewing on the browser now.&lt;/p&gt;
&lt;p&gt;Second, open your developer tool. For me, I use Chrome browser on my Mac so I 
hit “command-alt-I”. Here’s where a little bit detective in you and me need to 
come into play. What we are looking for is some hints indicating the tweets that
we see on the browser. Later on we could use those hints in the code to find the
information we need in a programmatic way. Let’s take a look…&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt chrome-developer-tool" src="/images/chrome-developer-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;Actually, Chrome dev tool has a very handy feature to let you inspect the 
component you see on the browser and highlight the corresponding html element. 
So what I did was to highlight the tweet content in the browser as the picture 
below. It shows that the content is using a &lt;p&gt; tag and it has the class 
attributes of “TweetTextSize”, “js-tweet-text”, and “tweet-text.”&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt inspection-tool" src="/images/inspection-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;My guss is that all the tweet contents use the same &lt;p&gt; tag and the same class 
attributes. You can verify it by inspect more tweets. Bingo, this is what we 
need. Let’s get down to the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;https://twitter.com/search&amp;quot;q=&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%40d&lt;/span&gt;&lt;span class="s1"&gt;awranliou&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textfor&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tweet-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Boom! Easy huh? Two packages I use are:
1. Requests: it makes sending HTTP requests super easy
1. BeautifulSoup: it makes parsing html super easy. And I love the name :)&lt;/p&gt;
&lt;p&gt;The code is very self-explainatory. Let’s run it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What… why? Empty list? That doesn’t make sense. Let’s not panic. Keep calm and 
open the python interactive mode to see what’s going on in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;97075&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I output the response to our HTTP request to a file. Locate the file and 
open it up with your browser.&lt;/p&gt;
&lt;p&gt;I do not see the tweets this time. So what’s happening here is that the web 
application design is very sophisticated that the tweet search results aren’t 
loaded, YET, when the HTTP response is back from the server. Instead, those 
tweets were loaded asynchronously using AJAX (stands for Asynchronous JavaScript
and XML) calls. With this design, the website could be loaded up very 
light-weighted at the beginning. As the user scrolls down the page, more 
contents will be loaded without the need of refreshing the page. This design is 
called Infinite Scrolling.&lt;/p&gt;
&lt;p&gt;In part 2, I’ll show you how to use Selenium, another very popular PyPI package,
to scrape the infinite scrolling page. Stay tuned!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Practical Uses of Python AND and OR Boolean Operators</title><link href="http://localhost:8000/practicle-boolean-operators.html" rel="alternate"></link><published>2016-03-02T10:20:00-08:00</published><updated>2016-03-02T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-03-02:/practicle-boolean-operators.html</id><summary type="html">&lt;p&gt;Why I love Python - 2&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my previous post — Python Truth Value Testing is Awesome, 
I mentioned about the sweet combo of the truth value testing and the boolean operators,
and gave an example for it using the or-operator. One of my colleagues gave me a comment
that the or-operator all seems legit, but the and-operator seems pretty anti-intuitive.
This raise the question in me: &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator"&gt;is there any practical example of using the and-operator
which also takes the advantage of the generic truth value testing&lt;/a&gt;?
Here’s what I found.&lt;/p&gt;
&lt;h1&gt;The Definitions&lt;/h1&gt;
&lt;p&gt;Let’s include &lt;a href="https://docs.python.org/3.5/reference/expressions.html#boolean-operations"&gt;the definitions&lt;/a&gt;
again to make this post more comprehensive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression &lt;code&gt;x and y&lt;/code&gt; first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;li&gt;The expression &lt;code&gt;x or y&lt;/code&gt; first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes indeed, at first glance neither of the operator seems intuitive compare to the
traditional boolean operator that only works for True and False as the operants.
Yet this is another thing I love about Python — the consistency. According to
&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;the Zen of Python&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Special cases aren't special enough to break the rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go ahead and plug in the True/False value into the above definitions. I’m not kidding.
If you haven’t done that, do it now. See where this is going? They still give you the
right values the same as what we expected. This more generic form of the operations does
not break the rules. Now the million dollar question is, what do we do with these generic
boolean operators? Hear me out.&lt;/p&gt;
&lt;h1&gt;Practical examples&lt;/h1&gt;
&lt;p&gt;Here’s my practical example for using both operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = []&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; empty list&lt;/span&gt;

&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = &amp;#39;apples&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; [&amp;#39;eggs&amp;#39;, &amp;#39;kales&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, thanks to &lt;a href="http://stackoverflow.com/users/248296/warvariuc"&gt;warvariuc&lt;/a&gt;
on &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator/35662540#35662540"&gt;Stackoverflow&lt;/a&gt;
to give an example for getting regex results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;OR is a fallback, AND is a guard&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4477850/python-and-or-operators-return-value/28321263#28321263"&gt;This&lt;/a&gt;
is the best analogy I find.&lt;/p&gt;
&lt;p&gt;Think of this way for the OR-operator: the second value serves as a &lt;strong&gt;fallback&lt;/strong&gt; value if something’s wrong
(does not exists, or have a False-y value) with the first.&lt;/p&gt;
&lt;p&gt;On the other hand, for the AND-operator, the first value serves as a &lt;strong&gt;guard&lt;/strong&gt; for retrieving the second value.
If the first value failed the truth value testing, the second won’t be accessed. With this analogy,
when I look at the and keyword in the code above, I tend to read “and” as “and then…,” because there’s
this hidden truth value testing behind the scene.&lt;/p&gt;
&lt;p&gt;This is such a nice short-hand, isn’t it? If you’re like me, a Python programmer transitioning from Java,
think about the fallback and the guard I talked about when you find yourself in the place to write if-else
code blocks just to do variable assignment. You might get your Ah-ha moment just like me while doing the
research for this article.&lt;/p&gt;</content><category term="python"></category><category term="tip"></category></entry><entry><title>Python Truth Value Testing is Awesome</title><link href="http://localhost:8000/truth-value-testing.html" rel="alternate"></link><published>2016-02-25T10:20:00-08:00</published><updated>2016-02-25T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-02-25:/truth-value-testing.html</id><summary type="html">&lt;p&gt;What I love about python — 1&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m constantly amazed by the simplicity and readability Python provides.
(See The &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;.)
As the industry evolves, more and more codes written each day,
how to read code fast is a rising question every developer would face.
Imaging the times when you faced a new code base and need to ramp up the knowledge in
order to work with it. Lot’s of reading, isn’t it? This is why I think Python is a great
modern programming language. Let’s talk about one of the features Python provides —
the &lt;a href="https://docs.python.org/3.5/library/stdtypes.html#truth-value-testing"&gt;truth value testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Go ahead and read the docs in Python’s official documentation.
You cannot avoid reading documentations while developing software.)&lt;/p&gt;
&lt;p&gt;Basically the doc tells you that any object could be used for if-condition,
while-condition, or boolean operation. Let’s look at the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-zero number is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty list is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty dict is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty string is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;0 is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty string is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty list is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{}:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty dict is not truthy!&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This feature gives us a very consistent way of writing code. Unlike writing code in Java,
I don’t need to remember whether the return type is a null pointer or a boolean false when
calling a method. In Python, a simple truth testing would give me the answer I want,
because they both gives me a False.&lt;/p&gt;
&lt;p&gt;The truth testing feature also makes a very sweet combo with the Boolean Operators. Consider the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code reads: get the &lt;code&gt;ENV_VAR&lt;/code&gt; value from the OS’s environment, if can’t find it,
just use a default value. It looks pretty neat, isn’t it? Imaging this code written in Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Needless to say, lot’s of noise for my eyes when reading it.&lt;/p&gt;
&lt;p&gt;Why this would work is because the Python or-operator does something slightly difference
than what we learn on the truth table. When evaluating the line &lt;code&gt;x or y&lt;/code&gt;, what Python does is
to do &lt;code&gt;if x is false, then y, else x&lt;/code&gt;. Again, the ‘if x is false’ statement wouldn’t work
without the truth value testing feature in Python.&lt;/p&gt;</content><category term="python"></category><category term="tip"></category></entry><entry><title>Flask for New Web Developer</title><link href="http://localhost:8000/flask-for-new-dev.html" rel="alternate"></link><published>2016-02-18T10:20:00-08:00</published><updated>2016-02-18T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-02-18:/flask-for-new-dev.html</id><summary type="html">&lt;p&gt;Thoughts after finishing my blog app using Python Flask&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt flask" src="/images/flask-logo.png"&gt;
&lt;em&gt;"Flask logo" by Flask is licensed under &lt;a href="http://flask.pocoo.org/docs/0.11/license/#flask-artwork-license"&gt;Flask Artwork License&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last long weekend after my geek marathon I finally
finished reading &lt;a href="http://www.amazon.com/Flask-Web-Development-Developing-Applications/dp/1449372627"&gt;Flask Web Development: Developing Web Applications with Python&lt;/a&gt;
and deployed my blog app on Heroku.
It was such rewarding to see my web app running online,
not only as a novice web application developer but also
as a adventurer to this whole new world of DevOps.
In this article I want to share some thoughts mostly about
Flask — the Python framework for web developing — ,
and covers a little about what I’d recommend a beginner to
start building web apps, and a little bit about the book.&lt;/p&gt;
&lt;p&gt;BTW, here’s the link to my blog: https://blog.dawran6.com&lt;/p&gt;
&lt;h1&gt;Flask&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Okay, why Flask? There are tons of web frameworks out there, why Flask?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just like starting learning a new programming language,
you’ll find all kinds of people debating and all kinds of
opinions about what’s best for you.
But the truth is, &lt;em&gt;I don’t know what I don’t know!&lt;/em&gt;
Have you ever had the experience jumping into a late class and
got so lost that you had not a single clue where to start asking questions?
This was because you don’t have the background knowledge to ask the right question, yet.
Yeah, that was my first contact with web development.&lt;/p&gt;
&lt;p&gt;Here’s my suggestion: if you are in the same situation as I did,
&lt;strong&gt;go pick the framework that has the coolest icon among those most popular frameworks.&lt;/strong&gt;
Sounds ridiculous, isn’t it? Not entirely. Hear me out:
the reason those frameworks are popular is because
they serve the general purpose of web development well and
they are very well-documented.
What you need in your situation is a learning tool that
ramps up your knowledge and skills to a degree so you can drive along the way.
Not fine tuning your product to fit a specific need.
Once you are on the way, I’d say it’ll be easy to change lanes to
other framework because now you know the right questions to ask even before starting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“A question well asked is half answered.” — Charles Kettering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So stop worrying about choosing the first framework and just choose one.
You’ll know how to make the right choice along the way.
What about the coolest icon thing?
Oh, that’s just some none-sense but something I tend to do a lot.
I’m a very visual learner and I got motivated to see pretty images.
&lt;strong&gt;After all, motivation and perseverance are the two things you’ll need.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you still can’t make up your mind after all the stuffs I talked above,
here’s the ultimatum: choose Flask!
I have to admit that I’m biased,
since I have no other web developing experience with other frameworks,
but I hope to convince you in the next section.&lt;/p&gt;
&lt;h1&gt;Flask as a learning tool&lt;/h1&gt;
&lt;p&gt;I’ve learned some great properties in Flask as a learning tool along my journey.&lt;/p&gt;
&lt;h2&gt;Starting Small&lt;/h2&gt;
&lt;p&gt;The first thing you know about Flask is —
“&lt;strong&gt;&lt;em&gt;Flask is a microframework for Python…&lt;/em&gt;&lt;/strong&gt;”.
Flask is designed to be extended.
The core of the framework only provide the bare minimum functionality for
you to build a web application.
I found this to be very different from the famous “battery-included”
philosophy for Python the language itself.
But WTH. This is the best part of Flask in my opinion.&lt;/p&gt;
&lt;p&gt;Take a User Login feature for example.
The scope could differ by a hundred miles based on the user story.
One user story could only need one admin login account;
another could be a social networking site allowing login with their Twitter accounts.
Flask does not make any assumption of it.
In the official tutorial — &lt;a href="http://flask.pocoo.org/docs/0.10/tutorial/introduction/"&gt;Flaskr&lt;/a&gt;,
it simply hard coded one set of username and password in the app and that’s it!
No database nor SQL code needed for user sign-in.
&lt;em&gt;(Here I’m just giving an example.
In the tutorial it actually shows you how to create a database for the blog posts.
However, there isn’t any restriction if you are going to
save all the blog posts into one gigantic text file and retrieve it later.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is great news for a beginner like I was!
Instead of learning a rich set of features provided in the framework,
I can focus on the minimum set of building an app,
and later on, if I need to extend the feature,
I can always look out for PyPI packages that serves my need.
This leads to my second point— the extensiblility&lt;/p&gt;
&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Because Flask does not make any assumption about anything
(besides that you are building a web app of course, stop being picky!),
once you acquire the basic knowledge,
it’s easy to extend it from there with Flask.
Take the User Login feature again for example,
if you are looking for a Twitter account login feature,
you’ll be able to find several PyPI packages to support it like Flask-OAuth,
or Flask-Social (or you can implement it yourself.)
Also, you can include the Flask-Login package to
deal with the login session for you and have all kinds of goodies to make your code cleaner.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: There are a great community support for
Flask extensions and lots of them are great! I won’t talk about those in this article though.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Popularity&lt;/h2&gt;
&lt;p&gt;Unarguably Flask is one of the most popular web frameworks.
&lt;strong&gt;With great popularity comes great community.&lt;/strong&gt;
There are lots of great articles, online tutorials,
and resources in all sorts of forms on the Internet.
So, in the end if you are not using Flask,
be my guest to use any of the popular frameworks out there.&lt;/p&gt;
&lt;h1&gt;How I learned in the hard way&lt;/h1&gt;
&lt;p&gt;It’s such a long route for me to learn web development now think of it.
What I used to do was to read a lot of online tutorials and code along the way.
I’ve always been more of a maker than a thinker.
I am the kid who always love to get hands dirty before the teacher said go.
However, I somehow failed with this approach when
I first learning about web developing.
The information in the articles or video tutorials I found
weren’t sufficient enough to ramp up my speed to
where I can cruise for myself even for a short while.
I got confused a lot and didn’t know what was missing out.&lt;/p&gt;
&lt;p&gt;Stumbling myself for a few while, finally I decide to consult to the books.
Sounds like old-school but it was my savior.
The book turned out to fit my needs very well —
it is leading you to build a real world application
in a very systematic way while introduces you different components of web development.
This is what makes all the difference.
Eventually I was able to gain the knowledge in each web components and
having fun coding along with it. If anyone ask me to recommend a book about Flask, this is it.&lt;/p&gt;
&lt;p&gt;This approach won’t be suitable for everyone.
But if you happen to face the difficulty to get into the web development,
reading books might be an option.&lt;/p&gt;
&lt;p&gt;There’s only one thing I wished the book to tell me more — deployment.
I think the last mile in the book was the longest part.
Anyways, the book isn’t about DevOps after all.&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;
&lt;p&gt;I am sharing my thoughts not because I know a lot about this topic.
On the contrary, I am sharing because I am just some dude who
knows a little more than a beginner,
and I want to help my fellow beginners to get out of the troubles I had.
At least I’m not too far from where beginners stand.
My memory is still quite fresh and relevant.&lt;/p&gt;
&lt;p&gt;I also plan to write a series of Flask tutorials in the future. Stay tuned!&lt;/p&gt;
&lt;p&gt;Hope you find this article useful for you, even just for a little.
I appreciate any comments or feedback.
Feel free to reach me on Twitter @dawranliou or below in the comment section. Cheers!&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="web"></category></entry><entry><title>First Game Programming Experience with Python and Pyglet under 30 Minutes</title><link href="http://localhost:8000/first-game-with-pyglet.html" rel="alternate"></link><published>2016-01-27T10:20:00-08:00</published><updated>2016-01-27T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:localhost,2016-01-27:/first-game-with-pyglet.html</id><summary type="html">&lt;p&gt;Make games with Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt pyglet" src="/images/pyglet-logo.png"&gt;
&lt;em&gt;"Pyglet logo" by Pyglet is licensed under &lt;a href="https://bitbucket.org/pyglet/pyglet/raw/ce5be4874dcb90d1ea2374ccafd630fe67bc3027/LICENSE"&gt;Alex Holkner&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is my first experience with game programming,
and also my first time working with the
Python &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;Pyglet&lt;/a&gt; package.
I got to say I feel so much accomplishment even though it’s just a dumb,
simple, ghetto game that could be done within 100 lines of codes.
It really amazes me how things could get done so easily these days.&lt;/p&gt;
&lt;p&gt;I was in the &lt;a href="http://www.meetup.com/sfpython/"&gt;San Francisco Python Meetup Group&lt;/a&gt;
and joined
&lt;a href="http://simeonfranklin.com/talk/pyglet/slides.html"&gt;Simeon’s Pyglet tutorial session&lt;/a&gt;,
which really gave me a blast.
In his tutorial, he showed some fundamental building blocks for
Pyglet game programming like showing images on window, how to do animation,
listening to keyboard or mouse event, and so on.
After half an hour diving into the tutorial, suddenly he said,
“&lt;em&gt;are you ready to make a game now?&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;That was a shock. I don’t even know where to start!
However, the goal was simple, to create a simple game with
50 to 100 lines of code within the next hour.
So I start with the simplest game idea that I could think of —
to dodge whatever falls from the sky.
The more you dodge, the more score you have,
till you got hit and the game’s over.
Simple enough, eh?
Now I’m going to find a nice 8-bit character for my game.
Guess what I found? Mega Man!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It’s time to get hands dirty!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, the coding process wasn’t as hard as expected.
I don’t have a really good code design for my game so
I simply make incremental progress along the way.
The result might have been chaotic but it turned out
good enough for my little game. This is what I did in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a window&lt;/li&gt;
&lt;li&gt;Show a still picture of Mega Man at the bottom of the window&lt;/li&gt;
&lt;li&gt;Show a still picture of the ball at the top of the window&lt;/li&gt;
&lt;li&gt;Make Pyglet listen to the left and right arrow keys and shifts the Mega Man accordingly&lt;/li&gt;
&lt;li&gt;Let Pyglet update the ball position every time the clock ticks&lt;/li&gt;
&lt;li&gt;Add a Game class that saves the “state of the game”. I’ll explain this later. OOP rocks!&lt;/li&gt;
&lt;li&gt;Refactor the code to use a Game object for updating the Mega Man position and the ball position&lt;/li&gt;
&lt;li&gt;Add the logic to detect and handle collision between Mega Man and the ball&lt;/li&gt;
&lt;li&gt;Add the score label and the score logic&lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My git repo is here: https://github.com/dawran6/pyglet-tutorial/blob/master/megaman.py.
The code is less than 100 lines so it shouldn’t be hard to
follow even though I didn’t put too much thought on the structure.
Like the famous quote says: “&lt;strong&gt;&lt;em&gt;if your first product does not embarrass you,
you are shipping it too late.&lt;/em&gt;&lt;/strong&gt;”
Leave me comments or tweet me @randydliou if you have any thought want to share.&lt;/p&gt;
&lt;p&gt;Come back to the step number 6 above.
There’re some good reasons to have a game state class defined in the code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You don’t need to declare global variable everywhere.&lt;/strong&gt;
I don’t like global variables. They make my code harder to maintain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Games are full of states that need to be tracked and
it’s a good idea to wrap those together for clarity.&lt;/strong&gt;
In my case, the states I am tracking is the position of Mega Man,
the position of the ball, the score, and if the game is terminated.
If the game gets bigger with more objects on the window, this list could increase a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it! It was a very entertaining and accomplishing experience. I had a lot of fun trying out something new. I think Pyglet did a pretty decent job maintain their documentation. It wasn’t hard for me to find the information that I needed. Highly recommend to give it a try if you’ve never done game programming before!&lt;/p&gt;</content><category term="python"></category><category term="game"></category></entry></feed>