<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Daw-Ran Liou's Blog</title><link href="http://dawranliou.com/" rel="alternate"></link><link href="http://dawranliou.com/feeds/all.atom.xml" rel="self"></link><id>http://dawranliou.com/</id><updated>2017-01-04T00:00:00-08:00</updated><entry><title>40 Books I Read in 2016</title><link href="http://dawranliou.com/40-books-in-2016.html" rel="alternate"></link><published>2017-01-04T00:00:00-08:00</published><updated>2017-01-04T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2017-01-04:/40-books-in-2016.html</id><summary type="html">&lt;p&gt;Summarizing the books I read in 2016&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt 2016-read-challenge" src="https://s.gr-assets.com/assets/challenges/2016/reading_challenge_banner-a0ce4577a8ece15e3dc5d17084080244.png"&gt;&lt;/p&gt;
&lt;p&gt;I challenged myself to read 10 books this year and I ended up reading 40 of them. Phew.
What a great year, 2016! I really picked up this new-found habbit of reading.
Feel free to add me friends on &lt;a href="https://www.goodreads.com/user/show/62701324-daw-ran-liou"&gt;Goodread&lt;/a&gt;
to see which book I'm currently reading. Let's read more! Here's my top 5 picks in 2016:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mistborn: The Final Empire (#33)&lt;/li&gt;
&lt;li&gt;Soft Skills - The Software Developer's Life Manual (#2)&lt;/li&gt;
&lt;li&gt;The 4-hour Work Week (#29)&lt;/li&gt;
&lt;li&gt;The Martian (#14)&lt;/li&gt;
&lt;li&gt;Ready Player One (#15)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. The Lean Startup&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt the-lean-startup" src="https://images.gr-assets.com/books/1333576876m/10127019.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I think I've been exposed to the "lean" concept a lot from day to day. When I 
read the book, it wasn't a big surprise to me.&lt;/p&gt;
&lt;h3&gt;2. Soft Skills - The Software Developer's Life Manual&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt soft-skills" src="https://images.gr-assets.com/books/1419180921m/23232941.jpg"&gt;&lt;/p&gt;
&lt;p&gt;THE single most influential book to me. This book talks every aspect of life but
software development.&lt;/p&gt;
&lt;h3&gt;3. Flask Web Development&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt flask-web-dev" src="https://images.gr-assets.com/books/1390432971m/18774655.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This book really gives me a great foundation of developing Flask app. Before I 
read this book, I was jumping around the online tutorials but they didn't work out for me.&lt;/p&gt;
&lt;h3&gt;4. How to Win Friends &amp;amp; Influence People&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt win-firends" src="https://images.gr-assets.com/books/1442726934m/4865.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is yet another very influential book. This classic book helps me to improve
my social life and my friendships.&lt;/p&gt;
&lt;h3&gt;5. The Millionaire Real Estate Investor&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt millionaire-real-estate" src="https://images.gr-assets.com/books/1417407442m/136205.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a great investment book. Not only did it change the way I thought about 
investing in real estate, but also give you a concrete plan for investing. 
However, the concrete plan part of the book is kind of hard to digest for me.&lt;/p&gt;
&lt;h3&gt;6. The War of Art&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt war-of-art" src="https://images.gr-assets.com/books/1388176109m/1319.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This classic book helps me to understand one of my worst enemy - 
procrastination. However, reading the book was like being lectured, which I 
don't typically enjoy.&lt;/p&gt;
&lt;h3&gt;7. The Autobiography of Benjamin Franklin&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt ben-franklin" src="https://images.gr-assets.com/books/1428170518m/52309.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Benjamin Franklin is such a fascinating person that I need to read his 
autobiography to know him.&lt;/p&gt;
&lt;h3&gt;8. Rich Dad Poor Dad&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt rick-dad-poor-dad" src="https://images.gr-assets.com/books/1388211242m/69571.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Another very influential book that changed the way I think about money.&lt;/p&gt;
&lt;h3&gt;9. The Power of Habit&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt power-of-habit" src="https://images.gr-assets.com/books/1366758683m/12609433.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Habit is one of the most important that dominates our daily lives without being 
notice. To understand it and be able to change it is so powerful that benefits 
all aspects of our lives.&lt;/p&gt;
&lt;h3&gt;10. Think and Grow Rich&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt think-grow-rich" src="https://images.gr-assets.com/books/1463241782m/30186948.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A classic book. It's amazing how often I heard about this book from various 
people. The book's content is too hard for me to digest. Need to read it again.&lt;/p&gt;
&lt;h3&gt;11. You are a Badass&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt badass" src="https://images.gr-assets.com/books/1351539051m/15843166.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a very motivating and fun book. Love yourself and others!&lt;/p&gt;
&lt;h3&gt;12. The End of Jobs&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt end-of-jobs" src="https://images.gr-assets.com/books/1438463792m/25827122.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I highly recommend this book! It changed a lot how I think about career. Its 
target audience it not specific to software engineers (unlike Soft Skills, my 
bible) so go read it everyone!&lt;/p&gt;
&lt;h3&gt;13. Year of Yes&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt year-of-yes" src="https://images.gr-assets.com/books/1443552148m/25690958.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Shonda Rhimes told about the amazing story of her Year of Yes.&lt;/p&gt;
&lt;h3&gt;14. The Martian (2nd time!)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt martian" src="https://images.gr-assets.com/books/1413706054m/18007564.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is the FIRST EVER book that I read twice in such a short period of time. 
This book is witty, is fun, and is full of science! If you like the movie you'll
definitely enjoy the book, I promise! Some of the best parts are in the book 
only. This is definitely one of my all-time favorites.&lt;/p&gt;
&lt;h3&gt;15. Ready Player One (2nd time!)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt ready-player-one" src="https://images.gr-assets.com/books/1406383612m/9969571.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is the SECOND EVER book that I read twice in such short period of time. 
It's full of imaginations and excitements! I enjoyed every moment reading it. Of
course it's one of my all-time favorites too!&lt;/p&gt;
&lt;h3&gt;16. Pitch Anything&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt pitch-anything" src="https://images.gr-assets.com/books/1347796457m/10321016.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I have the audio book version of it. It's always enjoyable listening to the 
author reading his/her own book. A lot of parts in the book is sort of 
irrelevant to me, but some of the pitches he made were just so crazily 
enchanting.&lt;/p&gt;
&lt;h3&gt;17. The Hitchhiker's Guide to the Galaxy&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt hitchhikers-guide" src="https://images.gr-assets.com/books/1327656754m/11.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Classic sci-fi book. I don't always get its jokes but it's a fun read.&lt;/p&gt;
&lt;h3&gt;18. So Good They Can't Ignore You&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt so-good-they-cant-ignore-you" src="https://images.gr-assets.com/books/1360564614m/13525945.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I highly recommend this book even though I haven't finished it. This book breaks
the wide-spread "follow your passion" mindset about our dream jobs. Instead, it 
focused on the craftsmanship mindset.&lt;/p&gt;
&lt;h3&gt;19. The 7 Habits of Highly Effective People&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt 7-habits" src="https://images.gr-assets.com/books/1421842784m/36072.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is one of the best self development books I’ve read and the lessons I 
learned from it really apply to everyone. In stead of thinking in efficiency, 
this book focuses on the ‘effectiveness’ of the work you do. It’s a subtle mind 
shift, but it definitely helped making the decisions for where should you put 
the energies in. Even after fist published 25 years ago, the advices are still 
so relevant these days. No wonder this is a classic book of its genre. I love 
this book and bought a hard copy with me for reference.&lt;/p&gt;
&lt;h3&gt;20. How to Talk to Anyone&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt how-to-talk-to-anyone" src="https://images.gr-assets.com/books/1388184197m/35210.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It’s a fun read but not so much I could grabbed on after reading it. The book’s 
goal is to bridge the gap where Dale Carnegie’s How to Win Friends and Influence
People, which published 80 years ago, didn’t tell the people living in the 21st 
century what to do. I love hearing about all the fun stories in the book.&lt;/p&gt;
&lt;h3&gt;21. The Like Switch&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt like-switch" src="https://images.gr-assets.com/books/1421037599m/21412226.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I enjoyed this book better than How to Talk to Anyone, even though the feelings 
I had to this book is somewhat similar to the other. It might be because the 
author was a former FBI agent and the stories was much more intrigue to me.&lt;/p&gt;
&lt;h3&gt;22. Quiet - The Power of Introverts in a World That Can't Stop Talking&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt quiet" src="https://images.gr-assets.com/books/1328562861m/8520610.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I’ve never felt so much connection to a book. This is yet another phenomenal 
book I’ve read. I learned so much about myself after reading it. I feel so much 
appreciation for Susan Cain, the author, for putting up the effort researching 
about the topic that’s so relevant to half of the population in this world. This
book has saved me from being doubt about a big part of myself.&lt;/p&gt;
&lt;h3&gt;23. Lean in&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt lean-in" src="https://images.gr-assets.com/books/1364250803m/16071764.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a great book that I think everyone should read. To me the book is about 
understanding, and supporting each other. Not only it’s applicable for female, 
but also the minority groups. Learning from Sheryl Sandburg’s marriage, I am 
more certain than ever that parents could both be successful in their career and
also have a great family.&lt;/p&gt;
&lt;h3&gt;24. Hackers: Heroes of the Computer Revolution&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt hackers" src="https://images.gr-assets.com/books/1435697935m/56829.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Reading the history of generations of hackers is like THE history of computer. 
It was the hackers that drove the entire computer revolutions. (&lt;em&gt;Respects&lt;/em&gt;) I’d 
like to recommend this book to anyone who’s in the software/computer industry.&lt;/p&gt;
&lt;h3&gt;25. The Personal MBA&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt personal-mba" src="https://images.gr-assets.com/books/1348014445m/9512985.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Having a technical backgraound, I know so little about business side and this book
is perfect for peoople like me to start thinking in business. Now I need to turn
those knowledges into actions. Recommend to all the tech fellows.&lt;/p&gt;
&lt;h3&gt;26. Getting to Yes&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt getting-to-yes" src="https://images.gr-assets.com/books/1442289862m/313605.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Seek mutual benefits and always aim for win-win.&lt;/p&gt;
&lt;h3&gt;27. The Hard Thing about Hard Things&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt hard-thing" src="https://images.gr-assets.com/books/1386609333m/18176747.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The book's first part tells the CRAZY startup story of Ben Horowitz. Reading
his words, I was so terrified and yet amazed by all the things he'd been through.
In the rests of the book, Ben explained what the hard things are and what he'd
learned from it. I am full of respect to the author and anyone starting a company.&lt;/p&gt;
&lt;h3&gt;28. The Richest Man in Babylon&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt richest-man-in-babylon" src="https://images.gr-assets.com/books/1348336780m/1052.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Full of wise thoughts about personal finance. My favorite quote is &lt;em&gt;"A part of what
I earned is mine to keep."&lt;/em&gt; Pay yourself first when you get the paycheck, instead of
paying the merchants. Financial education is so important yet totally missed-out in
our education. Glad that I start gaining more knowledge about it.&lt;/p&gt;
&lt;h3&gt;29. The 4-hour Work Week&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt 4-hour" src="https://images.gr-assets.com/books/1394578573m/6444424.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is one of my favorites. I can't tell you how much my mind was blown by this book.
Recommended by my brother, I read this book back-to-back twice and wished every word
would be memorized by heart.
"The End of Jobs" tells the importance of having one's own business, and this book
tells you exactly how. This is THE book that completely change the course of my life.&lt;/p&gt;
&lt;h3&gt;30. The Willpower Instinct&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt willpower-instinct" src="https://images.gr-assets.com/books/1436737104m/10865206.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Understanding what willpower is and how does it work have such an impact to my life.
Willpower is like superpower that we all have. Understand it and utilize it properly
makes us all superheroes. &lt;em&gt;(Side note: I was reading the Mistborn trilogy on the side
while reading The Willpower Instinct. A fun idea came to me. The willpowers are like
Mistings' Allomancy powers. Every time you draw willpower to face challenges, you
burn a bit of your willpower reserves away. There're certain way you can do to recharge
willpower, but if you don't use them wisely, they'll be burned out very quickly.)&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;31. Trump: The Art of The Deal&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt the-art-of-the-deal" src="https://images.gr-assets.com/books/1442705949m/1032.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Get's a sneak peak into Donal Trump's mind. This person is a great businessman with
a great mind. I'm giving him more respect after reading this book.&lt;/p&gt;
&lt;h3&gt;32. The E-myth Revisited&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt e-myth-revisited" src="https://images.gr-assets.com/books/1435673032m/81948.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a great companion book for The 4-hour Work Week. This book explained about the
"E-myth", the Entrepreneur Myth, for most technician-changed entrepreneur. The product
of a business isn't the real product of an entrepreneur. It is the business itself that is the
real product of an entrepreneur. The product of business is just a bi-product of good
business. There's a distinction between good product and good business. Good product
does not necessary lead to good business.&lt;/p&gt;
&lt;h3&gt;33. Mistborn: The Final Empire&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt mistborn-1" src="https://images.gr-assets.com/books/1314601971m/6547258.jpg"&gt;&lt;/p&gt;
&lt;p&gt;No doubt this is the my favorite novel of the year! OMG I've never enjoyed a novel this
much, and yet this is my very first book in the high-fantasy genre. I'll definitely read
more fantasy books in the future.&lt;/p&gt;
&lt;p&gt;This book completely blew my mind away! That was the most satisfying reading experience one could get. 
Brandon Sanderson is a genius. The fantasy world he created was simply amazing - its well-thought
magic system was the reason I first start reading the book but it was the characters and the twisted 
plots that stopped me from putting it down! It's full of tensions and OMG-that-did-not-just-happened 
throughout the book. I literary cried at a very emotional moment. I never cried over a book before. 
That how great it is. &lt;/p&gt;
&lt;p&gt;It's the longest book I read in ages but I totally enjoyed every minute of 30 hours. 
I just can't wait to reading the rest of two books of the trilogy.&lt;/p&gt;
&lt;h3&gt;34. A Brief History of Time&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt brief-history-of-time" src="https://images.gr-assets.com/books/1333578746m/3869.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I forgot most of the Quantum Mechanics and General Astronomy I learned in College.
But this is a very good introductory book for understanding those concepts plus more
contemporary science that's not covered in college curriculum. I was listening to
audio version of this book and I just didn't have time to let the concepts sink in.
Still, the book is fun and reminds me of the amazing mother nature. Or the universe.&lt;/p&gt;
&lt;h3&gt;35. Redshirts&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt redshirts" src="https://images.gr-assets.com/books/1348617890m/13055592.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hugo winner! It was a fun and casual book. It has very interesting prospect of the
science fiction world.&lt;/p&gt;
&lt;h3&gt;36. Speaker for the Dead&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt speaker-for-the-dead" src="https://images.gr-assets.com/books/1295660894m/7967.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The second book of The Ender Quintet. This book felt so different from Ender's Game.
It has so much more depth in emotions and morals. I still like Ender's Game more, but
not because this book isn't great. Speaker for the Dead is just too overwhelming to
me to grasp. Likely I'll revisit this book in the future.&lt;/p&gt;
&lt;h3&gt;37. The 10X Rule&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt 10x-rule" src="https://images.gr-assets.com/books/1310779133m/10339170.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Set your goal to incredibly high and take massive action towards it.&lt;/p&gt;
&lt;h3&gt;38. A Monster Calls&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt a-monster-calls" src="https://images.gr-assets.com/books/1474081871m/28588061.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A very beautiful story about facing death. &lt;/p&gt;
&lt;h3&gt;39. Grokking Algorithms: An Illustrated Guide for Programmers and Other Curious People&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt grokking-algorithms" src="https://images.gr-assets.com/books/1458747997m/22847284.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I love this algorithm book! Especially the part explaining dynamic programming. 
All the illustrations are beautiful and feels very friendly, which makes an algorithm
book much more intriguing.&lt;/p&gt;
&lt;h3&gt;40. 台灣不教的中國近代史&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt modern-history-china" src="https://images.gr-assets.com/books/1426748118m/25173379.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我最喜歡的部份是蔣中正的故事。蔣中正在中國近代史中是滿爭議的人物，所以我很想多了解這個人。
作者出生在中國大陸、經歷過文化大革命，後來到日本定居。從他的角度說了蔣中正是怎麼崛起、抗日、
敗給中國共產黨。不論他對後世的影響，我很佩服蔣中正做事的決心、打仗的謀略、跟面對高壓環境的
能力。我比較驚訝的是抗日之後，他幾乎像是性情大變，形勢錯估得離譜然後就輸得一塌糊塗。不知道
是我看錯他的個性還是抗日改變了他。書的其他部分還滿有趣的但我沒有很喜歡作者敘事的語氣，滿多
時候帶了太多個人情感。&lt;/p&gt;
&lt;h3&gt;41. Code Name Verity (still reading)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="alt code-name-verity" src="https://images.gr-assets.com/books/1373223199m/16250900.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A beautiful story about friendships. Still reading.&lt;/p&gt;</content><category term="book"></category></entry><entry><title>Never Write For-Loops Again</title><link href="http://dawranliou.com/never-write-for-loops.html" rel="alternate"></link><published>2016-11-17T00:00:00-08:00</published><updated>2016-11-17T00:00:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-11-17:/never-write-for-loops.html</id><summary type="html">&lt;p&gt;Challenge yourself to use awesome language features instead of for-loops&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a challenge. I challenge you to avoid writing for-loops in every scenario.
Also, I challenge you to find the scenarios that are so freaking hard to write 
anything else but a for-loop. Please share your findings. I’d like to hear about
them.&lt;/p&gt;
&lt;p&gt;It’s been a while since I started exploring the amazing language features in 
Python. At the beginning, it’s just a challenge I gave myself to practice using 
more language features instead of those I learned from other programming 
language. And things are just getting more fun! Not only the code become shorter
and cleaner, but also code looks more structured and disciplined. I’ll get into 
those benefits more in this article.&lt;/p&gt;
&lt;p&gt;But first, let’s take a step back and see what’s the intuition behind writing a 
for-loop:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To go through a sequence to extract out some information&lt;/li&gt;
&lt;li&gt;To generate another sequence out of the current sequence&lt;/li&gt;
&lt;li&gt;This is my second nature to write for-loops because I’m a programmer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fortunately, there are already great tools that are built into Python to help 
you accomplish the goals! All you need is to shift your mind and look at the 
things in a different angle.&lt;/p&gt;
&lt;h1&gt;What you gain by not writing for-loops everywhere&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Fewer lines of code&lt;/li&gt;
&lt;li&gt;Better code readability&lt;/li&gt;
&lt;li&gt;Leave indentation for managing context only&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s see the code skeleton below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, we are dealing with multiple layers of code. THIS IS HARD TO 
READ. The problem I found in this code is that it is mixing the 
&lt;strong&gt;administrative&lt;/strong&gt; logic (the &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;try-except&lt;/code&gt;) with the &lt;strong&gt;business logic&lt;/strong&gt; 
(the &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;) by giving them the indentation ubiquitously. If you are 
disciplined about using indentation only for administrative logic, your core 
business logic would stand out immediately.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Flat is better than nested" - The Zen of Python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Tools you can use to avoid using for-loops&lt;/h1&gt;
&lt;h2&gt;1. List Comprehension / Generator Expression&lt;/h2&gt;
&lt;p&gt;Let’s see a simple example. Basically you want to compile a sequence based on 
another existing sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;code&gt;map&lt;/code&gt; if you love MapReduce, or, Python has List Comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, if you wish to get a iterator only, you can use Generator Expression 
with almost the same syntax. (How can you not love the consistency in Python?)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Functions&lt;/h2&gt;
&lt;p&gt;Thinking in a higher-order, more functional programming way, if you want to map 
a sequence to another, simply call the &lt;code&gt;map&lt;/code&gt; function. (Be my guest to use list 
comprehension here instead.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;doubled_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to reduce a sequence into a single, use &lt;code&gt;reduce&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="n"&gt;summation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, lots of Python's builtin functions consumes iterables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Extract Functions or Generators&lt;/h2&gt;
&lt;p&gt;The above two methods are great to deal with simpler logic. How about more 
complex logic? As a programmer, we write functions to abstract out the difficult
things. Same idea applies here. If you are writing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# setups&lt;/span&gt;
    &lt;span class="c1"&gt;# condition&lt;/span&gt;
    &lt;span class="c1"&gt;# processing&lt;/span&gt;
    &lt;span class="c1"&gt;# calculation&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apparently you are giving too much responsibility to a single code block. 
Instead, I propose you do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# setups&lt;/span&gt;
    &lt;span class="c1"&gt;# condition&lt;/span&gt;
    &lt;span class="c1"&gt;# processing&lt;/span&gt;
    &lt;span class="c1"&gt;# calculation&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;process_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item_list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about nested for-loops?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;List Comprehension got your back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about if you have some internal state in the code block to
keep?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# finding the max prior to the current item&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# results = [3, 4, 6, 6, 6, 9, 9, 9, 9, 9]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's extract a generator to achieve this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;current_max&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;"Oh wait, you just used a for-loop in the generator function. That's cheating!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fine, smart ass, let's try the following.&lt;/p&gt;
&lt;h2&gt;4. Don't write it yourself. &lt;code&gt;itertools&lt;/code&gt; got you covered&lt;/h2&gt;
&lt;p&gt;This module is simply brilliant. I believe this module covers 80% of the cases 
that you makes you want to write for-loops. For example, the last example can be
rewritten to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;accumulate&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;resutls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, if you are iterating on combinatoric sequnces, there are &lt;code&gt;product()&lt;/code&gt;, 
&lt;code&gt;permutations()&lt;/code&gt;, &lt;code&gt;combinations()&lt;/code&gt; to use.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;You don’t need to write for-loops in most scenarios&lt;/li&gt;
&lt;li&gt;You should avoid writing for-loops, so you have better code readability&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Action&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Look at your code again. Spot any places that you wrote a for-loop previously
by intuition. Think again and see if it make sense to re-write it without using 
for-loop.&lt;/li&gt;
&lt;li&gt;Share your cases that are hard to code without using for-loops&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;This &lt;a href="https://medium.com/@dawran6/never-write-for-loops-again-91a5a4c84baf"&gt;article&lt;/a&gt; was originally posted in my &lt;a href="https://medium.com/@dawran6"&gt;Medium blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><category term="python"></category><category term="best-practice"></category><category term="tip"></category></entry><entry><title>Twitter scraper tutorial with Python: Requests, BeautifulSoup, and Selenium — Part 2</title><link href="http://dawranliou.com/twitter-scraper-2.html" rel="alternate"></link><published>2016-04-09T10:20:00-07:00</published><updated>2016-04-09T10:20:00-07:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-04-09:/twitter-scraper-2.html</id><summary type="html">&lt;p&gt;Twitter scrapper tutorial&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by Bruce, my friend’s take-home interview question, I started this 
bite-size project to play around with some of the most popular PyPI packages: 
Requests, BeautifulSoup, and Selenium. In this tutorial, I’ll show you the 
step-by-step process of how I build a Twitter Search web scraper without using 
their REST API.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is the part 2 of my Twitter scraper tutorial. If you haven’t checkout part 
1, the link is right here. In the last part, I left the tutorial with an unsolved
problem — how to scrape the web page that uses infinite scrolling design? Two 
solutions came into my mind: one more sophisticated, the other more naive:&lt;/p&gt;
&lt;h1&gt;The more sophisticated approach&lt;/h1&gt;
&lt;p&gt;In this approach, you need to understand how the infinite scrolling works. In 
the case of this tutorial, when the tweet search page loaded, none of the tweets
contents were loaded at the time. It is the frontend javascript code that sends 
the HTTP request to get tweets from the server asynchronously, and manipulates 
the HTML file to render those tweets. This technology is called AJAX. You may 
find more information online if you are interested.&lt;/p&gt;
&lt;p&gt;Anyways, do you spot the flaw in the approach of part 1? The original HTTP 
request wasn’t the right request to get the tweets! It merely loads a page with 
right the javascript code, which load the tweets on the fly. So listen carefully:
If you are able to track down the right HTTP request object, which gets the 
tweets result, the only thing left is to replace the original request with this 
one. Voila! This is my so-called more sophisticated approach. However, I didn’t 
go with this approach simply I didn’t spend the time to :P&lt;/p&gt;
&lt;h1&gt;The more naive approach&lt;/h1&gt;
&lt;p&gt;Okay! This is the approach I want to show you. Think about the problem this way:
no matter how sophisticated the website is designed, the end result is still a 
list of tweets loaded on your browser. So my so-called more naive approach is to
focus on the end result only. if we could manipulate the browser to load those 
tweets for me, just as what we see normally, we could use the same the knowledge
to parse the HTML file and get the tweets. To automate the browser for us, I’ll 
show you how I used Selenium.&lt;/p&gt;
&lt;p&gt;“Selenium automates browsers.” That’s what the official website says. Selenium 
Python bindings will help us to use Selenium using Python. Follow the 
installation page to install it. The code below tells Selenium to use Chrome to 
open up the Twitter search page and then move down the page for 5 times. Since 
the browser object provides the handy API to locate the tweets, we don’t need to
use the BeautifulSoup again to parse the HTML file. You may run the script now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;https://twitter.com/search?q=&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%40d&lt;/span&gt;&lt;span class="s1"&gt;awranliou&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_tag_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAGE_DOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_elements_by_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tweet-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;selenium.common.exceptions.WebDriverException: Message: 'chromedriver'
executable needs to be in PATH. Please see
https://sites.google.com/a/chromium.org/chromedriver/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Don’t panic. Read the error message (don’t just google it blindly) and what’s 
wrong is that you are missing the ‘chromedriver’ executable file. It also 
suggest you to go to the website. How nice it is! Download the executable from 
the website given and put it under one of your PATH loacation. For me, I put it 
under my /usr/local/bin/ folder. You should be fine to run the script by now.&lt;/p&gt;
&lt;p&gt;This is the end of this tutorial! Hope you enjoy working with these amazing PyPI
packages. Feel free to comment or contact me if you want to learn more. Happy 
learning! Cheers!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Twitter scraper tutorial with Python: Requests, BeautifulSoup, and Selenium — Part 1</title><link href="http://dawranliou.com/twitter-scraper-1.html" rel="alternate"></link><published>2016-03-26T10:20:00-07:00</published><updated>2016-03-26T10:20:00-07:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-03-26:/twitter-scraper-1.html</id><summary type="html">&lt;p&gt;Twitter scrapper tutorial&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by Bruce, my friend’s take-home interview question, I started this 
bite-size project to play around with some of the most popular PyPI packages: 
Requests, BeautifulSoup, and Selenium. In this tutorial, I’ll show you the 
step-by-step process of how I build a Twitter Search web scraper without using 
their REST API.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;“Well, why not use their API?”&lt;/em&gt; you might ask. I have two reasons:&lt;/p&gt;
&lt;p&gt;Not all the websites expose REST APIs to clients. In order to retrieve data from 
those websites in a programmatic way, it’s good to know how to do web scrapping.&lt;/p&gt;
&lt;p&gt;To use Twitter’s APIs, you’ll need OAuth to authenticate your application. I was 
just too lazy to figure that out at the time. (Yeah, I’ll figure it out and post 
another tutorial on that.)&lt;/p&gt;
&lt;p&gt;Here we go! Fire up your favorite browser and go to the url: 
https://twitter.com/search-home. You’ll see a text box in the middle. That’s 
where we begin. Try typing in something that you want to search and see what 
happens. For me, I want to search for all tweets from my twitter account, 
@dawranliou. So I typed it in and hit enter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt twitter-search-landing-page" src="/images/twitter-search-landing-page.png"&gt;&lt;/p&gt;
&lt;p&gt;In the next page, you can see a list of tweets. Let’s make our first note here: 
what’s the current url? For my search results, it is 
https://twitter.com/search?q=%40dawranliou. This url is important since the 
python application we are writing will need it to retrieve the same data we are 
viewing on the browser now.&lt;/p&gt;
&lt;p&gt;Second, open your developer tool. For me, I use Chrome browser on my Mac so I 
hit “command-alt-I”. Here’s where a little bit detective in you and me need to 
come into play. What we are looking for is some hints indicating the tweets that
we see on the browser. Later on we could use those hints in the code to find the
information we need in a programmatic way. Let’s take a look…&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt chrome-developer-tool" src="/images/chrome-developer-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;Actually, Chrome dev tool has a very handy feature to let you inspect the 
component you see on the browser and highlight the corresponding html element. 
So what I did was to highlight the tweet content in the browser as the picture 
below. It shows that the content is using a &lt;p&gt; tag and it has the class 
attributes of “TweetTextSize”, “js-tweet-text”, and “tweet-text.”&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt inspection-tool" src="/images/inspection-tool.png"&gt;&lt;/p&gt;
&lt;p&gt;My guss is that all the tweet contents use the same &lt;p&gt; tag and the same class 
attributes. You can verify it by inspect more tweets. Bingo, this is what we 
need. Let’s get down to the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;https://twitter.com/search&amp;quot;q=&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%40d&lt;/span&gt;&lt;span class="s1"&gt;awranliou&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textfor&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tweet-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Boom! Easy huh? Two packages I use are:
1. Requests: it makes sending HTTP requests super easy
1. BeautifulSoup: it makes parsing html super easy. And I love the name :)&lt;/p&gt;
&lt;p&gt;The code is very self-explainatory. Let’s run it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What… why? Empty list? That doesn’t make sense. Let’s not panic. Keep calm and 
open the python interactive mode to see what’s going on in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;97075&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I output the response to our HTTP request to a file. Locate the file and 
open it up with your browser.&lt;/p&gt;
&lt;p&gt;I do not see the tweets this time. So what’s happening here is that the web 
application design is very sophisticated that the tweet search results aren’t 
loaded, YET, when the HTTP response is back from the server. Instead, those 
tweets were loaded asynchronously using AJAX (stands for Asynchronous JavaScript
and XML) calls. With this design, the website could be loaded up very 
light-weighted at the beginning. As the user scrolls down the page, more 
contents will be loaded without the need of refreshing the page. This design is 
called Infinite Scrolling.&lt;/p&gt;
&lt;p&gt;In part 2, I’ll show you how to use Selenium, another very popular PyPI package,
to scrape the infinite scrolling page. Stay tuned!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Completed my first hackathon!</title><link href="http://dawranliou.com/first-hackathon.html" rel="alternate"></link><published>2016-03-10T10:20:00-08:00</published><updated>2016-03-10T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-03-10:/first-hackathon.html</id><summary type="html">&lt;p&gt;It was such a blast!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt hackathon" src="/images/hackathon.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It was such a amazing experience. There’s no such thing that make you,
and your teammate pull a all-nighter and still gives you one of the
best times of your life, except hackathon. (Hackathon rocks!) I want to
share with you what it was like, if you don’t already know, and some
thoughts about it.&lt;/p&gt;
&lt;p&gt;My company started its first ever hackathon last Thursday at 8 am. 
All submission were done on Friday, 12 pm and the whole afternoon is
for presentations and demonstrations. The basic idea of hackathon: 
it is a project competition that’s done during days of marathon-like 
intensive working/hacking. Participating teams get unlimited supplies 
of coffee and red bulls. Indeed this sounds very terrifying.&lt;/p&gt;
&lt;p&gt;When I use the word “hack” it is not exactly the same thing we pictured 
of what computer hackers do. For here it is more generic. Hacking is 
“to interact with a system in a way that the system don’t want you to.” 
For example, to gain access to another person’s online credentials without 
permission. Obviously, in usual use cases, the system wouldn’t want you to. 
Another example, to write a backdoor in your company’s commercialized 
software even though your company does not allow you to. Yeah, these are hacking.&lt;/p&gt;
&lt;p&gt;During the hackathon, not only did our team hacked a backdoor in the system, 
but also did we hacked the system software architecture (a little) in order 
to get our parasite-like software running on top of it. I believe we had 
embraced the true spirit of hacking.&lt;/p&gt;
&lt;p&gt;But those did not really matter. &lt;strong&gt;The biggest enemy in hackathon&lt;/strong&gt;, in my opinion, 
&lt;strong&gt;is perfectionism&lt;/strong&gt;. The 80–20 rules works very well here — &lt;em&gt;if you can make 80% 
of the things to work with 20% of the efforts, why spending the rest of the 80% of
time?&lt;/em&gt; If spending 20 mins hacking the system could get the software to work, why 
spend the extra hour or so? That’s what we ended up doing a lot through the hackathon.&lt;/p&gt;
&lt;p&gt;Honestly, this isn’t my first ever hackathon I’ve attended. However, this is the 
first ever hackathon that I finished. The difference is, I didn’t understand my 
tools well enough the previous time so I ended up spending a lot of time on the 
web searching for answers I should’ve known by the time. This time was different. 
I gain much more experience in building Flask web app throughout the course of 
past few months. Knowing my tools well enough, I’ve built-up the necessary coding
muscle memory that I don’t need to consult the documents so often. This gave me 
the edge to be able to construct my idea into code more quickly.&lt;/p&gt;
&lt;p&gt;A little bit about my hackathon project: the software stack I’m using is Python 
Flask for backend, and my crappy Bootstrap skills for frontend. The project idea is to
build a automated task scheduler web service on top of the existing system. Writing 
the web service wasn’t the hardest. The most difficult challenge is to integrate 
the web service into our existing system. OMG, I can’t tell how much relief it 
felt to see those pieces working together for the first time.&lt;/p&gt;
&lt;p&gt;I’m very proud of what my team had achieved in the hackathon. However, there’s one 
thing till today I still think that I could have (and should have) done better is 
the demo. I admit that we didn’t put too much thought into the demo. All I think 
was that we were going to BLOW EVERYONE’S MIND just by showing it. Turned out it
didn’t. Our way of presenting the software wasn’t very engaging to the judges. If
I could go back in time to where we started the hackathon, I would’ve punch in my
nerdy face and told him to sit down and think about the demo. Think about what 
you want to present in the demo. And be focused on making that happen. Everything
else is the extra 80% burden that drags you along the way.&lt;/p&gt;
&lt;p&gt;It’s amazing how things are so clear afterwards. I got two lessons learned in the end:
1. Know your tools well — go build up the coding muscle memory!
1. Design for demo — keep demo in mind all the time!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Practical Uses of Python AND and OR Boolean Operators</title><link href="http://dawranliou.com/practicle-boolean-operators.html" rel="alternate"></link><published>2016-03-02T10:20:00-08:00</published><updated>2016-03-02T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-03-02:/practicle-boolean-operators.html</id><summary type="html">&lt;p&gt;Why I love Python - 2&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my previous post — Python Truth Value Testing is Awesome, 
I mentioned about the sweet combo of the truth value testing and the boolean operators,
and gave an example for it using the or-operator. One of my colleagues gave me a comment
that the or-operator all seems legit, but the and-operator seems pretty anti-intuitive.
This raise the question in me: &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator"&gt;is there any practical example of using the and-operator
which also takes the advantage of the generic truth value testing&lt;/a&gt;?
Here’s what I found.&lt;/p&gt;
&lt;h1&gt;The Definitions&lt;/h1&gt;
&lt;p&gt;Let’s include &lt;a href="https://docs.python.org/3.5/reference/expressions.html#boolean-operations"&gt;the definitions&lt;/a&gt;
again to make this post more comprehensive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression &lt;code&gt;x and y&lt;/code&gt; first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;li&gt;The expression &lt;code&gt;x or y&lt;/code&gt; first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes indeed, at first glance neither of the operator seems intuitive compare to the
traditional boolean operator that only works for True and False as the operants.
Yet this is another thing I love about Python — the consistency. According to
&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;the Zen of Python&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Special cases aren't special enough to break the rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go ahead and plug in the True/False value into the above definitions. I’m not kidding.
If you haven’t done that, do it now. See where this is going? They still give you the
right values the same as what we expected. This more generic form of the operations does
not break the rules. Now the million dollar question is, what do we do with these generic
boolean operators? Hear me out.&lt;/p&gt;
&lt;h1&gt;Practical examples&lt;/h1&gt;
&lt;p&gt;Here’s my practical example for using both operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = []&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; empty list&lt;/span&gt;

&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = &amp;#39;apples&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; [&amp;#39;eggs&amp;#39;, &amp;#39;kales&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, thanks to &lt;a href="http://stackoverflow.com/users/248296/warvariuc"&gt;warvariuc&lt;/a&gt;
on &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator/35662540#35662540"&gt;Stackoverflow&lt;/a&gt;
to give an example for getting regex results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;OR is a fallback, AND is a guard&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4477850/python-and-or-operators-return-value/28321263#28321263"&gt;This&lt;/a&gt;
is the best analogy I find.&lt;/p&gt;
&lt;p&gt;Think of this way for the OR-operator: the second value serves as a &lt;strong&gt;fallback&lt;/strong&gt; value if something’s wrong
(does not exists, or have a False-y value) with the first.&lt;/p&gt;
&lt;p&gt;On the other hand, for the AND-operator, the first value serves as a &lt;strong&gt;guard&lt;/strong&gt; for retrieving the second value.
If the first value failed the truth value testing, the second won’t be accessed. With this analogy,
when I look at the and keyword in the code above, I tend to read “and” as “and then…,” because there’s
this hidden truth value testing behind the scene.&lt;/p&gt;
&lt;p&gt;This is such a nice short-hand, isn’t it? If you’re like me, a Python programmer transitioning from Java,
think about the fallback and the guard I talked about when you find yourself in the place to write if-else
code blocks just to do variable assignment. You might get your Ah-ha moment just like me while doing the
research for this article.&lt;/p&gt;</content><category term="python"></category><category term="tip"></category></entry><entry><title>Python Truth Value Testing is Awesome</title><link href="http://dawranliou.com/truth-value-testing.html" rel="alternate"></link><published>2016-02-25T10:20:00-08:00</published><updated>2016-02-25T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-02-25:/truth-value-testing.html</id><summary type="html">&lt;p&gt;What I love about python — 1&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m constantly amazed by the simplicity and readability Python provides.
(See The &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;.)
As the industry evolves, more and more codes written each day,
how to read code fast is a rising question every developer would face.
Imaging the times when you faced a new code base and need to ramp up the knowledge in
order to work with it. Lot’s of reading, isn’t it? This is why I think Python is a great
modern programming language. Let’s talk about one of the features Python provides —
the &lt;a href="https://docs.python.org/3.5/library/stdtypes.html#truth-value-testing"&gt;truth value testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Go ahead and read the docs in Python’s official documentation.
You cannot avoid reading documentations while developing software.)&lt;/p&gt;
&lt;p&gt;Basically the doc tells you that any object could be used for if-condition,
while-condition, or boolean operation. Let’s look at the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-zero number is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty list is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty dict is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty string is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;0 is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty string is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty list is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{}:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty dict is not truthy!&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This feature gives us a very consistent way of writing code. Unlike writing code in Java,
I don’t need to remember whether the return type is a null pointer or a boolean false when
calling a method. In Python, a simple truth testing would give me the answer I want,
because they both gives me a False.&lt;/p&gt;
&lt;p&gt;The truth testing feature also makes a very sweet combo with the Boolean Operators. Consider the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code reads: get the &lt;code&gt;ENV_VAR&lt;/code&gt; value from the OS’s environment, if can’t find it,
just use a default value. It looks pretty neat, isn’t it? Imaging this code written in Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Needless to say, lot’s of noise for my eyes when reading it.&lt;/p&gt;
&lt;p&gt;Why this would work is because the Python or-operator does something slightly difference
than what we learn on the truth table. When evaluating the line &lt;code&gt;x or y&lt;/code&gt;, what Python does is
to do &lt;code&gt;if x is false, then y, else x&lt;/code&gt;. Again, the ‘if x is false’ statement wouldn’t work
without the truth value testing feature in Python.&lt;/p&gt;</content><category term="python"></category><category term="tip"></category></entry><entry><title>Flask for New Web Developer</title><link href="http://dawranliou.com/flask-for-new-dev.html" rel="alternate"></link><published>2016-02-18T10:20:00-08:00</published><updated>2016-02-18T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-02-18:/flask-for-new-dev.html</id><summary type="html">&lt;p&gt;Thoughts after finishing my blog app using Python Flask&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt flask" src="/images/flask-logo.png"&gt;
&lt;em&gt;"Flask logo" by Flask is licensed under &lt;a href="http://flask.pocoo.org/docs/0.11/license/#flask-artwork-license"&gt;Flask Artwork License&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last long weekend after my geek marathon I finally
finished reading &lt;a href="http://www.amazon.com/Flask-Web-Development-Developing-Applications/dp/1449372627"&gt;Flask Web Development: Developing Web Applications with Python&lt;/a&gt;
and deployed my blog app on Heroku.
It was such rewarding to see my web app running online,
not only as a novice web application developer but also
as a adventurer to this whole new world of DevOps.
In this article I want to share some thoughts mostly about
Flask — the Python framework for web developing — ,
and covers a little about what I’d recommend a beginner to
start building web apps, and a little bit about the book.&lt;/p&gt;
&lt;p&gt;BTW, here’s the link to my blog: https://blog.dawran6.com&lt;/p&gt;
&lt;h1&gt;Flask&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Okay, why Flask? There are tons of web frameworks out there, why Flask?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just like starting learning a new programming language,
you’ll find all kinds of people debating and all kinds of
opinions about what’s best for you.
But the truth is, &lt;em&gt;I don’t know what I don’t know!&lt;/em&gt;
Have you ever had the experience jumping into a late class and
got so lost that you had not a single clue where to start asking questions?
This was because you don’t have the background knowledge to ask the right question, yet.
Yeah, that was my first contact with web development.&lt;/p&gt;
&lt;p&gt;Here’s my suggestion: if you are in the same situation as I did,
&lt;strong&gt;go pick the framework that has the coolest icon among those most popular frameworks.&lt;/strong&gt;
Sounds ridiculous, isn’t it? Not entirely. Hear me out:
the reason those frameworks are popular is because
they serve the general purpose of web development well and
they are very well-documented.
What you need in your situation is a learning tool that
ramps up your knowledge and skills to a degree so you can drive along the way.
Not fine tuning your product to fit a specific need.
Once you are on the way, I’d say it’ll be easy to change lanes to
other framework because now you know the right questions to ask even before starting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“A question well asked is half answered.” — Charles Kettering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So stop worrying about choosing the first framework and just choose one.
You’ll know how to make the right choice along the way.
What about the coolest icon thing?
Oh, that’s just some none-sense but something I tend to do a lot.
I’m a very visual learner and I got motivated to see pretty images.
&lt;strong&gt;After all, motivation and perseverance are the two things you’ll need.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you still can’t make up your mind after all the stuffs I talked above,
here’s the ultimatum: choose Flask!
I have to admit that I’m biased,
since I have no other web developing experience with other frameworks,
but I hope to convince you in the next section.&lt;/p&gt;
&lt;h1&gt;Flask as a learning tool&lt;/h1&gt;
&lt;p&gt;I’ve learned some great properties in Flask as a learning tool along my journey.&lt;/p&gt;
&lt;h2&gt;Starting Small&lt;/h2&gt;
&lt;p&gt;The first thing you know about Flask is —
“&lt;strong&gt;&lt;em&gt;Flask is a microframework for Python…&lt;/em&gt;&lt;/strong&gt;”.
Flask is designed to be extended.
The core of the framework only provide the bare minimum functionality for
you to build a web application.
I found this to be very different from the famous “battery-included”
philosophy for Python the language itself.
But WTH. This is the best part of Flask in my opinion.&lt;/p&gt;
&lt;p&gt;Take a User Login feature for example.
The scope could differ by a hundred miles based on the user story.
One user story could only need one admin login account;
another could be a social networking site allowing login with their Twitter accounts.
Flask does not make any assumption of it.
In the official tutorial — &lt;a href="http://flask.pocoo.org/docs/0.10/tutorial/introduction/"&gt;Flaskr&lt;/a&gt;,
it simply hard coded one set of username and password in the app and that’s it!
No database nor SQL code needed for user sign-in.
&lt;em&gt;(Here I’m just giving an example.
In the tutorial it actually shows you how to create a database for the blog posts.
However, there isn’t any restriction if you are going to
save all the blog posts into one gigantic text file and retrieve it later.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is great news for a beginner like I was!
Instead of learning a rich set of features provided in the framework,
I can focus on the minimum set of building an app,
and later on, if I need to extend the feature,
I can always look out for PyPI packages that serves my need.
This leads to my second point— the extensiblility&lt;/p&gt;
&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Because Flask does not make any assumption about anything
(besides that you are building a web app of course, stop being picky!),
once you acquire the basic knowledge,
it’s easy to extend it from there with Flask.
Take the User Login feature again for example,
if you are looking for a Twitter account login feature,
you’ll be able to find several PyPI packages to support it like Flask-OAuth,
or Flask-Social (or you can implement it yourself.)
Also, you can include the Flask-Login package to
deal with the login session for you and have all kinds of goodies to make your code cleaner.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: There are a great community support for
Flask extensions and lots of them are great! I won’t talk about those in this article though.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Popularity&lt;/h2&gt;
&lt;p&gt;Unarguably Flask is one of the most popular web frameworks.
&lt;strong&gt;With great popularity comes great community.&lt;/strong&gt;
There are lots of great articles, online tutorials,
and resources in all sorts of forms on the Internet.
So, in the end if you are not using Flask,
be my guest to use any of the popular frameworks out there.&lt;/p&gt;
&lt;h1&gt;How I learned in the hard way&lt;/h1&gt;
&lt;p&gt;It’s such a long route for me to learn web development now think of it.
What I used to do was to read a lot of online tutorials and code along the way.
I’ve always been more of a maker than a thinker.
I am the kid who always love to get hands dirty before the teacher said go.
However, I somehow failed with this approach when
I first learning about web developing.
The information in the articles or video tutorials I found
weren’t sufficient enough to ramp up my speed to
where I can cruise for myself even for a short while.
I got confused a lot and didn’t know what was missing out.&lt;/p&gt;
&lt;p&gt;Stumbling myself for a few while, finally I decide to consult to the books.
Sounds like old-school but it was my savior.
The book turned out to fit my needs very well —
it is leading you to build a real world application
in a very systematic way while introduces you different components of web development.
This is what makes all the difference.
Eventually I was able to gain the knowledge in each web components and
having fun coding along with it. If anyone ask me to recommend a book about Flask, this is it.&lt;/p&gt;
&lt;p&gt;This approach won’t be suitable for everyone.
But if you happen to face the difficulty to get into the web development,
reading books might be an option.&lt;/p&gt;
&lt;p&gt;There’s only one thing I wished the book to tell me more — deployment.
I think the last mile in the book was the longest part.
Anyways, the book isn’t about DevOps after all.&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;
&lt;p&gt;I am sharing my thoughts not because I know a lot about this topic.
On the contrary, I am sharing because I am just some dude who
knows a little more than a beginner,
and I want to help my fellow beginners to get out of the troubles I had.
At least I’m not too far from where beginners stand.
My memory is still quite fresh and relevant.&lt;/p&gt;
&lt;p&gt;I also plan to write a series of Flask tutorials in the future. Stay tuned!&lt;/p&gt;
&lt;p&gt;Hope you find this article useful for you, even just for a little.
I appreciate any comments or feedback.
Feel free to reach me on Twitter @dawranliou or below in the comment section. Cheers!&lt;/p&gt;</content><category term="python"></category><category term="flask"></category><category term="web"></category></entry><entry><title>First Game Programming Experience with Python and Pyglet under 30 Minutes</title><link href="http://dawranliou.com/first-game-with-pyglet.html" rel="alternate"></link><published>2016-01-27T10:20:00-08:00</published><updated>2016-01-27T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-01-27:/first-game-with-pyglet.html</id><summary type="html">&lt;p&gt;Make games with Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt pyglet" src="/images/pyglet-logo.png"&gt;
&lt;em&gt;"Pyglet logo" by Pyglet is licensed under &lt;a href="https://bitbucket.org/pyglet/pyglet/raw/ce5be4874dcb90d1ea2374ccafd630fe67bc3027/LICENSE"&gt;Alex Holkner&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is my first experience with game programming,
and also my first time working with the
Python &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;Pyglet&lt;/a&gt; package.
I got to say I feel so much accomplishment even though it’s just a dumb,
simple, ghetto game that could be done within 100 lines of codes.
It really amazes me how things could get done so easily these days.&lt;/p&gt;
&lt;p&gt;I was in the &lt;a href="http://www.meetup.com/sfpython/"&gt;San Francisco Python Meetup Group&lt;/a&gt;
and joined
&lt;a href="http://simeonfranklin.com/talk/pyglet/slides.html"&gt;Simeon’s Pyglet tutorial session&lt;/a&gt;,
which really gave me a blast.
In his tutorial, he showed some fundamental building blocks for
Pyglet game programming like showing images on window, how to do animation,
listening to keyboard or mouse event, and so on.
After half an hour diving into the tutorial, suddenly he said,
“&lt;em&gt;are you ready to make a game now?&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;That was a shock. I don’t even know where to start!
However, the goal was simple, to create a simple game with
50 to 100 lines of code within the next hour.
So I start with the simplest game idea that I could think of —
to dodge whatever falls from the sky.
The more you dodge, the more score you have,
till you got hit and the game’s over.
Simple enough, eh?
Now I’m going to find a nice 8-bit character for my game.
Guess what I found? Mega Man!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It’s time to get hands dirty!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, the coding process wasn’t as hard as expected.
I don’t have a really good code design for my game so
I simply make incremental progress along the way.
The result might have been chaotic but it turned out
good enough for my little game. This is what I did in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a window&lt;/li&gt;
&lt;li&gt;Show a still picture of Mega Man at the bottom of the window&lt;/li&gt;
&lt;li&gt;Show a still picture of the ball at the top of the window&lt;/li&gt;
&lt;li&gt;Make Pyglet listen to the left and right arrow keys and shifts the Mega Man accordingly&lt;/li&gt;
&lt;li&gt;Let Pyglet update the ball position every time the clock ticks&lt;/li&gt;
&lt;li&gt;Add a Game class that saves the “state of the game”. I’ll explain this later. OOP rocks!&lt;/li&gt;
&lt;li&gt;Refactor the code to use a Game object for updating the Mega Man position and the ball position&lt;/li&gt;
&lt;li&gt;Add the logic to detect and handle collision between Mega Man and the ball&lt;/li&gt;
&lt;li&gt;Add the score label and the score logic&lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My git repo is here: https://github.com/dawran6/pyglet-tutorial/blob/master/megaman.py.
The code is less than 100 lines so it shouldn’t be hard to
follow even though I didn’t put too much thought on the structure.
Like the famous quote says: “&lt;strong&gt;&lt;em&gt;if your first product does not embarrass you,
you are shipping it too late.&lt;/em&gt;&lt;/strong&gt;”
Leave me comments or tweet me @randydliou if you have any thought want to share.&lt;/p&gt;
&lt;p&gt;Come back to the step number 6 above.
There’re some good reasons to have a game state class defined in the code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You don’t need to declare global variable everywhere.&lt;/strong&gt;
I don’t like global variables. They make my code harder to maintain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Games are full of states that need to be tracked and
it’s a good idea to wrap those together for clarity.&lt;/strong&gt;
In my case, the states I am tracking is the position of Mega Man,
the position of the ball, the score, and if the game is terminated.
If the game gets bigger with more objects on the window, this list could increase a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it! It was a very entertaining and accomplishing experience. I had a lot of fun trying out something new. I think Pyglet did a pretty decent job maintain their documentation. It wasn’t hard for me to find the information that I needed. Highly recommend to give it a try if you’ve never done game programming before!&lt;/p&gt;</content><category term="python"></category><category term="game"></category></entry><entry><title>How I wake up 2 hours earlier every day and become happier</title><link href="http://dawranliou.com/morning-routine.html" rel="alternate"></link><published>2016-01-27T10:20:00-08:00</published><updated>2016-01-27T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-01-27:/morning-routine.html</id><summary type="html">&lt;p&gt;My morning routines&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="alt morning-routine" src="https://tombasson.files.wordpress.com/2015/01/morning-routine.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Here’s how I kick off my workdays&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;6:00 AM:
the alarm went off.
I allowed myself to stay in bed 5 more minutes to
skim through my phone notifications and
got up to do the 8 mins abs workout on my yoga mat.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;6:15 AM:
I went to the bathroom to take a hot shower,
and 5 minutes later, was looking in the mirror brushing
my teeth (and also do some other stuffs I can do
without clothes in the bathroom, like, shaving.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;6:40 AM:
I drizzled some oil on the hot pan and started
frying an egg for my power breakfast.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;7:00 AM:
took a moment to enjoy my power breakfast with
a cup of fresh made pour over coffee. (Mmmmmmm.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;7:15 AM:
sit back at my desk and started my morning learning session.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;9:00 AM:
time to hit the road! Great, the traffic is calmer now.
I shall be in the office by 9:50.
[Press the play button on my favorite Podcast]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was nothing like the person described above at all three months ago.
What I’d like to tell you is the story of &lt;strong&gt;the routine I used to do
three months ago&lt;/strong&gt; and &lt;strong&gt;what happens after adopting my new routine.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;A little bit story about myself.
I’m a software developer working in the San Francisco Bay Area.
Like lots of people based in the Bay Area, we commutes!
And a lot!
The commute between my office and my place without traffic is
around 45 minutes oneway.
However, if you happen to be courageous enough to go on highway
during rush hour, guess what,
45 minutes is the time you spend stuck in the traffic with the
speed a dog can easily walk pass you.&lt;/p&gt;
&lt;h2&gt;My old routine&lt;/h2&gt;
&lt;p&gt;The traffic is bad, so what? I avoid them.
To hit the road at 9 AM, I used to wake up 8:30 in the morning and
rushed out my door without eating breakfast.
Like everyone else who enjoys sleeping and believe me I still am,
I need at least 7 hours of sleep every day in order to gain enough
energy for a day of work plus my noon workout routine (this is another story).
So at this period of time, I went to bed around 1 AM, typically.&lt;/p&gt;
&lt;p&gt;Now looking back, I was consistently feeling pressures from
work and life because I felt my free time was shrinking so much by the commute.
Quite often I found myself working in my off time and
tended to stay up late just to get more free time for work and myself.
This system wasn’t working right for me.&lt;/p&gt;
&lt;h2&gt;The motivation&lt;/h2&gt;
&lt;p&gt;I don’t have any legit reason to set up my mind for this change.
It’s just one day I came up the crazy idea:
“I’m going to challenge myself to wake up at 6 everyday for
21 days in a row because it sounds a healthy thing to do.”
Just kidding, I was first inspired by this YouTube video —
&lt;a href="https://www.youtube.com/watch?v=jjDmhNBtEfU"&gt;How To Develop A Kick Ass Morning Routine | 5 Tips For Starting Your Day&lt;/a&gt;
. This video help me to gather some great ideas to design
my morning routine from this video.
I also made a mental note that if the challenge was completed,
I’ll hang on to it and see how long could the streak goes on. (It’s 81 days BTW.)&lt;/p&gt;
&lt;h2&gt;My challenge started&lt;/h2&gt;
&lt;p&gt;In order to get enough sleep,
I forced myself to go to bed earlier than before at 11 PM.
Like most challenges, &lt;strong&gt;you gotta push yourself and hang in there!&lt;/strong&gt;
The hardest part for me was the weekends.
While still going out late with friends I still need to wake up at 6
the next day because I don’t want to fail the challenge.
On the craziest weekend I was partying out till 3 AM for
two days in a row and still manage to go on a snowboard trip on the third day.
Man, good old days.&lt;/p&gt;
&lt;p&gt;In order to get to bed by 11,
I made one of the best decisions ever since working —
not working after work hours.
Why?
Because I don’t have time after work anymore.
On a normal day, I took off at 7 and get home by 8.
After dinner, doing the dishes, cleaning up here and there,
and maybe some video games, it’s almost 10 PM.
Doing any sort of work an hour before sleep will
cause my brain not wanting go to bed in time.
Plus, with my extra 2 hours in the next morning I could catch them up later.
Someone would call me if it is THAT urgent.
My sleep quality boosted so much ever since.&lt;/p&gt;
&lt;p&gt;In the morning, I’d do a quick workout, any sort of workout.
Since I’m already keeping a regular workout everyday at lunch time,
I found the best workout I could do is for my abs.
I tend to skip abs in my regular noon workout easily so
why not tackle it the first thing in the morning?
The last line sounds like an awesome gym motivation quote. Cool. [Self-five]&lt;/p&gt;
&lt;p&gt;About my power breakfast,
there are three building blocks: proteins, carbs, and fruits.
An example of my breakfast is english muffin with a fried egg,
2 slices of turkey breasts, lettuce, half of a avocado,
lean cream cheese and 2 kiwis.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More energy&lt;/strong&gt; —
I don’t have any scientific fact to back me up but
I feel much more energetic even with the same amount of sleep.
Rarely do I feel sleepy during the workday now
(except when my workout at noon is too intense.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More time on the right tasks&lt;/strong&gt; —
Instead of stuck in the traffic,
now I’m using the best part of my entire day (morning!)
to on the most valuable thing — learning (sometimes some urgent work).
Driving is just a break before working.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Less pressure&lt;/strong&gt; —
Instead of dealing with work late at night,
dealing them in the morning gives me much more control of time and
less pressure by the time I go to bed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Healthier&lt;/strong&gt; — I’m eating proper breakfast everyday!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;To sum up all above, I’m a happier developer now!&lt;/strong&gt;&lt;/p&gt;</content><category term="life-style"></category></entry></feed>