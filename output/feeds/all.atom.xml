<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Daw-Ran Liou's Blog</title><link href="http://dawranliou.com/" rel="alternate"></link><link href="http://dawranliou.com/feeds/all.atom.xml" rel="self"></link><id>http://dawranliou.com/</id><updated>2016-03-10T10:20:00-08:00</updated><entry><title>Completed my first hackathon!</title><link href="http://dawranliou.com/completed-my-first-hackathon.html" rel="alternate"></link><published>2016-03-10T10:20:00-08:00</published><updated>2016-03-10T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-03-10:completed-my-first-hackathon.html</id><summary type="html">&lt;p&gt;It was such a amazing experience. There’s no such thing that make you,
and your teammate pull a all-nighter and still gives you one of the
best times of your life, except hackathon. (Hackathon rocks!) I want to
share with you what it was like, if you don’t already know, and some
thoughts about it.&lt;/p&gt;
&lt;p&gt;My company started its first ever hackathon last Thursday at 8 am. 
All submission were done on Friday, 12 pm and the whole afternoon is
for presentations and demonstrations. The basic idea of hackathon: 
it is a project competition that’s done during days of marathon-like 
intensive working/hacking. Participating teams get unlimited supplies 
of coffee and red bulls. Indeed this sounds very terrifying.&lt;/p&gt;
&lt;p&gt;When I use the word “hack” it is not exactly the same thing we pictured 
of what computer hackers do. For here it is more generic. Hacking is 
“to interact with a system in a way that the system don’t want you to.” 
For example, to gain access to another person’s online credentials without 
permission. Obviously, in usual use cases, the system wouldn’t want you to. 
Another example, to write a backdoor in your company’s commercialized 
software even though your company does not allow you to. Yeah, these are hacking.&lt;/p&gt;
&lt;p&gt;During the hackathon, not only did our team hacked a backdoor in the system, 
but also did we hacked the system software architecture (a little) in order 
to get our parasite-like software running on top of it. I believe we had 
embraced the true spirit of hacking.&lt;/p&gt;
&lt;p&gt;But those did not really matter. &lt;strong&gt;The biggest enemy in hackathon&lt;/strong&gt;, in my opinion, 
&lt;strong&gt;is perfectionism&lt;/strong&gt;. The 80–20 rules works very well here — &lt;em&gt;if you can make 80% 
of the things to work with 20% of the efforts, why spending the rest of the 80% of
time?&lt;/em&gt; If spending 20 mins hacking the system could get the software to work, why 
spend the extra hour or so? That’s what we ended up doing a lot through the hackathon.&lt;/p&gt;
&lt;p&gt;Honestly, this isn’t my first ever hackathon I’ve attended. However, this is the 
first ever hackathon that I finished. The difference is, I didn’t understand my 
tools well enough the previous time so I ended up spending a lot of time on the 
web searching for answers I should’ve known by the time. This time was different. 
I gain much more experience in building Flask web app throughout the course of 
past few months. Knowing my tools well enough, I’ve built-up the necessary coding
muscle memory that I don’t need to consult the documents so often. This gave me 
the edge to be able to construct my idea into code more quickly.&lt;/p&gt;
&lt;p&gt;A little bit about my hackathon project: the software stack I’m using is Python 
Flask for backend, and my crappy Bootstrap skills for frontend. The project idea is to
build a automated task scheduler web service on top of the existing system. Writing 
the web service wasn’t the hardest. The most difficult challenge is to integrate 
the web service into our existing system. OMG, I can’t tell how much relief it 
felt to see those pieces working together for the first time.&lt;/p&gt;
&lt;p&gt;I’m very proud of what my team had achieved in the hackathon. However, there’s one 
thing till today I still think that I could have (and should have) done better is 
the demo. I admit that we didn’t put too much thought into the demo. All I think 
was that we were going to BLOW EVERYONE’S MIND just by showing it. Turned out it
didn’t. Our way of presenting the software wasn’t very engaging to the judges. If
I could go back in time to where we started the hackathon, I would’ve punch in my
nerdy face and told him to sit down and think about the demo. Think about what 
you want to present in the demo. And be focused on making that happen. Everything
else is the extra 80% burden that drags you along the way.&lt;/p&gt;
&lt;p&gt;It’s amazing how things are so clear afterwards. I got two lessons learned in the end:
1. Know your tools well — go build up the coding muscle memory!
1. Design for demo — keep demo in mind all the time!&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Practical Uses of Python AND and OR Boolean Operators</title><link href="http://dawranliou.com/practical-uses-of-python-and-and-or-boolean-operators.html" rel="alternate"></link><published>2016-03-02T10:20:00-08:00</published><updated>2016-03-02T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-03-02:practical-uses-of-python-and-and-or-boolean-operators.html</id><summary type="html">&lt;p&gt;In my previous post — Python Truth Value Testing is Awesome, 
I mentioned about the sweet combo of the truth value testing and the boolean operators,
and gave an example for it using the or-operator. One of my colleagues gave me a comment
that the or-operator all seems legit, but the and-operator seems pretty anti-intuitive.
This raise the question in me: &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator"&gt;is there any practical example of using the and-operator
which also takes the advantage of the generic truth value testing&lt;/a&gt;?
Here’s what I found.&lt;/p&gt;
&lt;h1&gt;The Definitions&lt;/h1&gt;
&lt;p&gt;Let’s include &lt;a href="https://docs.python.org/3.5/reference/expressions.html#boolean-operations"&gt;the definitions&lt;/a&gt;
again to make this post more comprehensive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression &lt;code&gt;x and y&lt;/code&gt; first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;li&gt;The expression &lt;code&gt;x or y&lt;/code&gt; first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes indeed, at first glance neither of the operator seems intuitive compare to the
traditional boolean operator that only works for True and False as the operants.
Yet this is another thing I love about Python — the consistency. According to
&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;the Zen of Python&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Special cases aren't special enough to break the rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go ahead and plug in the True/False value into the above definitions. I’m not kidding.
If you haven’t done that, do it now. See where this is going? They still give you the
right values the same as what we expected. This more generic form of the operations does
not break the rules. Now the million dollar question is, what do we do with these generic
boolean operators? Hear me out.&lt;/p&gt;
&lt;h1&gt;Practical examples&lt;/h1&gt;
&lt;p&gt;Here’s my practical example for using both operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = []&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; empty list&lt;/span&gt;

&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kales&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;next_item_to_buy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;my_shopping_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; next_item_to_buy = &amp;#39;apples&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_shopping_list&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt; [&amp;#39;eggs&amp;#39;, &amp;#39;kales&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, thanks to &lt;a href="http://stackoverflow.com/users/248296/warvariuc"&gt;warvariuc&lt;/a&gt;
on &lt;a href="http://stackoverflow.com/questions/35657101/practical-examples-of-python-and-operator/35662540#35662540"&gt;Stackoverflow&lt;/a&gt;
to give an example for getting regex results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\w(\d+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;OR is a fallback, AND is a guard&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4477850/python-and-or-operators-return-value/28321263#28321263"&gt;This&lt;/a&gt;
is the best analogy I find.&lt;/p&gt;
&lt;p&gt;Think of this way for the OR-operator: the second value serves as a &lt;strong&gt;fallback&lt;/strong&gt; value if something’s wrong
(does not exists, or have a False-y value) with the first.&lt;/p&gt;
&lt;p&gt;On the other hand, for the AND-operator, the first value serves as a &lt;strong&gt;guard&lt;/strong&gt; for retrieving the second value.
If the first value failed the truth value testing, the second won’t be accessed. With this analogy,
when I look at the and keyword in the code above, I tend to read “and” as “and then…,” because there’s
this hidden truth value testing behind the scene.&lt;/p&gt;
&lt;p&gt;This is such a nice short-hand, isn’t it? If you’re like me, a Python programmer transitioning from Java,
think about the fallback and the guard I talked about when you find yourself in the place to write if-else
code blocks just to do variable assignment. You might get your Ah-ha moment just like me while doing the
research for this article.&lt;/p&gt;</summary><category term="python"></category><category term="tip"></category></entry><entry><title>Python Truth Value Testing is Awesome</title><link href="http://dawranliou.com/python-truth-value-testing-is-awesome.html" rel="alternate"></link><published>2016-02-25T10:20:00-08:00</published><updated>2016-02-25T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-02-25:python-truth-value-testing-is-awesome.html</id><summary type="html">&lt;p&gt;I’m constantly amazed by the simplicity and readability Python provides.
(See The &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;.) 
As the industry evolves, more and more codes written each day,
how to read code fast is a rising question every developer would face.
Imaging the times when you faced a new code base and need to ramp up the knowledge in
order to work with it. Lot’s of reading, isn’t it? This is why I think Python is a great
modern programming language. Let’s talk about one of the features Python provides —
the &lt;a href="https://docs.python.org/3.5/library/stdtypes.html#truth-value-testing"&gt;truth value testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Go ahead and read the docs in Python’s official documentation.
You cannot avoid reading documentations while developing software.)&lt;/p&gt;
&lt;p&gt;Basically the doc tells you that any object could be used for if-condition,
while-condition, or boolean operation. Let’s look at the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-zero number is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty list is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty dict is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a_string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;non-empty string is truthy!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;0 is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty string is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty list is not truthy!&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;{}:&lt;/span&gt;
    &lt;span class="c1"&gt;# print(&amp;#39;empty dict is not truthy!&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This feature gives us a very consistent way of writing code. Unlike writing code in Java,
I don’t need to remember whether the return type is a null pointer or a boolean false when
calling a method. In Python, a simple truth testing would give me the answer I want,
because they both gives me a False.&lt;/p&gt;
&lt;p&gt;The truth testing feature also makes a very sweet combo with the Boolean Operators. Consider the code below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code reads: get the &lt;code&gt;ENV_VAR&lt;/code&gt; value from the OS’s environment, if can’t find it,
just use a default value. It looks pretty neat, isn’t it? Imaging this code written in Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getEnvVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV_VAR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;default_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Needless to say, lot’s of noise for my eyes when reading it.&lt;/p&gt;
&lt;p&gt;Why this would work is because the Python or-operator does something slightly difference
than what we learn on the truth table. When evaluating the line &lt;code&gt;x or y&lt;/code&gt;, what Python does is
to do &lt;code&gt;if x is false, then y, else x&lt;/code&gt;. Again, the ‘if x is false’ statement wouldn’t work
without the truth value testing feature in Python.&lt;/p&gt;</summary><category term="python"></category><category term="tip"></category></entry><entry><title>Flask for New Web Developer</title><link href="http://dawranliou.com/flask-for-new-web-developer.html" rel="alternate"></link><published>2016-02-18T10:20:00-08:00</published><updated>2016-02-18T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-02-18:flask-for-new-web-developer.html</id><summary type="html">&lt;p&gt;Last long weekend after my geek marathon I finally
finished reading &lt;a href="http://www.amazon.com/Flask-Web-Development-Developing-Applications/dp/1449372627"&gt;Flask Web Development: Developing Web Applications with Python&lt;/a&gt;
and deployed my blog app on Heroku.
It was such rewarding to see my web app running online,
not only as a novice web application developer but also
as a adventurer to this whole new world of DevOps.
In this article I want to share some thoughts mostly about
Flask — the Python framework for web developing — ,
and covers a little about what I’d recommend a beginner to
start building web apps, and a little bit about the book.&lt;/p&gt;
&lt;p&gt;BTW, here’s the link to my blog: https://blog.dawran6.com&lt;/p&gt;
&lt;h1&gt;Flask&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Okay, why Flask? There are tons of web frameworks out there, why Flask?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just like starting learning a new programming language,
you’ll find all kinds of people debating and all kinds of
opinions about what’s best for you.
But the truth is, &lt;em&gt;I don’t know what I don’t know!&lt;/em&gt;
Have you ever had the experience jumping into a late class and
got so lost that you had not a single clue where to start asking questions?
This was because you don’t have the background knowledge to ask the right question, yet.
Yeah, that was my first contact with web development.&lt;/p&gt;
&lt;p&gt;Here’s my suggestion: if you are in the same situation as I did,
&lt;strong&gt;go pick the framework that has the coolest icon among those most popular frameworks.&lt;/strong&gt;
Sounds ridiculous, isn’t it? Not entirely. Hear me out:
the reason those frameworks are popular is because
they serve the general purpose of web development well and
they are very well-documented.
What you need in your situation is a learning tool that
ramps up your knowledge and skills to a degree so you can drive along the way.
Not fine tuning your product to fit a specific need.
Once you are on the way, I’d say it’ll be easy to change lanes to
other framework because now you know the right questions to ask even before starting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“A question well asked is half answered.” — Charles Kettering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So stop worrying about choosing the first framework and just choose one.
You’ll know how to make the right choice along the way.
What about the coolest icon thing?
Oh, that’s just some none-sense but something I tend to do a lot.
I’m a very visual learner and I got motivated to see pretty images.
&lt;strong&gt;After all, motivation and perseverance are the two things you’ll need.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you still can’t make up your mind after all the stuffs I talked above,
here’s the ultimatum: choose Flask!
I have to admit that I’m biased,
since I have no other web developing experience with other frameworks,
but I hope to convince you in the next section.&lt;/p&gt;
&lt;h1&gt;Flask as a learning tool&lt;/h1&gt;
&lt;p&gt;I’ve learned some great properties in Flask as a learning tool along my journey.&lt;/p&gt;
&lt;h2&gt;Starting Small&lt;/h2&gt;
&lt;p&gt;The first thing you know about Flask is —
“&lt;strong&gt;&lt;em&gt;Flask is a microframework for Python…&lt;/em&gt;&lt;/strong&gt;”.
Flask is designed to be extended.
The core of the framework only provide the bare minimum functionality for
you to build a web application.
I found this to be very different from the famous “battery-included”
philosophy for Python the language itself.
But WTH. This is the best part of Flask in my opinion.&lt;/p&gt;
&lt;p&gt;Take a User Login feature for example.
The scope could differ by a hundred miles based on the user story.
One user story could only need one admin login account;
another could be a social networking site allowing login with their Twitter accounts.
Flask does not make any assumption of it.
In the official tutorial — &lt;a href="http://flask.pocoo.org/docs/0.10/tutorial/introduction/"&gt;Flaskr&lt;/a&gt;,
it simply hard coded one set of username and password in the app and that’s it!
No database nor SQL code needed for user sign-in.
&lt;em&gt;(Here I’m just giving an example.
In the tutorial it actually shows you how to create a database for the blog posts.
However, there isn’t any restriction if you are going to
save all the blog posts into one gigantic text file and retrieve it later.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is great news for a beginner like I was!
Instead of learning a rich set of features provided in the framework,
I can focus on the minimum set of building an app,
and later on, if I need to extend the feature,
I can always look out for PyPI packages that serves my need.
This leads to my second point— the extensiblility&lt;/p&gt;
&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Because Flask does not make any assumption about anything
(besides that you are building a web app of course, stop being picky!),
once you acquire the basic knowledge,
it’s easy to extend it from there with Flask.
Take the User Login feature again for example,
if you are looking for a Twitter account login feature,
you’ll be able to find several PyPI packages to support it like Flask-OAuth,
or Flask-Social (or you can implement it yourself.)
Also, you can include the Flask-Login package to
deal with the login session for you and have all kinds of goodies to make your code cleaner.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: There are a great community support for
Flask extensions and lots of them are great! I won’t talk about those in this article though.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Popularity&lt;/h2&gt;
&lt;p&gt;Unarguably Flask is one of the most popular web frameworks.
&lt;strong&gt;With great popularity comes great community.&lt;/strong&gt;
There are lots of great articles, online tutorials,
and resources in all sorts of forms on the Internet.
So, in the end if you are not using Flask,
be my guest to use any of the popular frameworks out there.&lt;/p&gt;
&lt;h1&gt;How I learned in the hard way&lt;/h1&gt;
&lt;p&gt;It’s such a long route for me to learn web development now think of it.
What I used to do was to read a lot of online tutorials and code along the way.
I’ve always been more of a maker than a thinker.
I am the kid who always love to get hands dirty before the teacher said go.
However, I somehow failed with this approach when
I first learning about web developing.
The information in the articles or video tutorials I found
weren’t sufficient enough to ramp up my speed to
where I can cruise for myself even for a short while.
I got confused a lot and didn’t know what was missing out.&lt;/p&gt;
&lt;p&gt;Stumbling myself for a few while, finally I decide to consult to the books.
Sounds like old-school but it was my savior.
The book turned out to fit my needs very well —
it is leading you to build a real world application
in a very systematic way while introduces you different components of web development.
This is what makes all the difference.
Eventually I was able to gain the knowledge in each web components and
having fun coding along with it. If anyone ask me to recommend a book about Flask, this is it.&lt;/p&gt;
&lt;p&gt;This approach won’t be suitable for everyone.
But if you happen to face the difficulty to get into the web development,
reading books might be an option.&lt;/p&gt;
&lt;p&gt;There’s only one thing I wished the book to tell me more — deployment.
I think the last mile in the book was the longest part.
Anyways, the book isn’t about DevOps after all.&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;
&lt;p&gt;I am sharing my thoughts not because I know a lot about this topic.
On the contrary, I am sharing because I am just some dude who
knows a little more than a beginner,
and I want to help my fellow beginners to get out of the troubles I had.
At least I’m not too far from where beginners stand.
My memory is still quite fresh and relevant.&lt;/p&gt;
&lt;p&gt;I also plan to write a series of Flask tutorials in the future. Stay tuned!&lt;/p&gt;
&lt;p&gt;Hope you find this article useful for you, even just for a little.
I appreciate any comments or feedback.
Feel free to reach me on Twitter @dawranliou or below in the comment section. Cheers!&lt;/p&gt;</summary><category term="python"></category><category term="flask"></category><category term="web"></category></entry><entry><title>First Game Programming Experience with Python and Pyglet under 30 Minutes</title><link href="http://dawranliou.com/first-game-programming-experience-with-python-and-pyglet-under-30-minutes.html" rel="alternate"></link><published>2016-01-27T10:20:00-08:00</published><updated>2016-01-27T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-01-27:first-game-programming-experience-with-python-and-pyglet-under-30-minutes.html</id><summary type="html">&lt;p&gt;This is my first experience with game programming,
and also my first time working with the
Python &lt;a href="https://bitbucket.org/pyglet/pyglet/wiki/Home"&gt;Pyglet&lt;/a&gt; package.
I got to say I feel so much accomplishment even though it’s just a dumb,
simple, ghetto game that could be done within 100 lines of codes.
It really amazes me how things could get done so easily these days.&lt;/p&gt;
&lt;p&gt;I was in the &lt;a href="http://www.meetup.com/sfpython/"&gt;San Francisco Python Meetup Group&lt;/a&gt;
and joined
&lt;a href="http://simeonfranklin.com/talk/pyglet/slides.html"&gt;Simeon’s Pyglet tutorial session&lt;/a&gt;,
which really gave me a blast.
In his tutorial, he showed some fundamental building blocks for
Pyglet game programming like showing images on window, how to do animation,
listening to keyboard or mouse event, and so on.
After half an hour diving into the tutorial, suddenly he said,
“&lt;em&gt;are you ready to make a game now?&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;That was a shock. I don’t even know where to start!
However, the goal was simple, to create a simple game with
50 to 100 lines of code within the next hour.
So I start with the simplest game idea that I could think of —
to dodge whatever falls from the sky.
The more you dodge, the more score you have,
till you got hit and the game’s over.
Simple enough, eh?
Now I’m going to find a nice 8-bit character for my game.
Guess what I found? Mega Man!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It’s time to get hands dirty!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, the coding process wasn’t as hard as expected.
I don’t have a really good code design for my game so
I simply make incremental progress along the way.
The result might have been chaotic but it turned out
good enough for my little game. This is what I did in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a window&lt;/li&gt;
&lt;li&gt;Show a still picture of Mega Man at the bottom of the window&lt;/li&gt;
&lt;li&gt;Show a still picture of the ball at the top of the window&lt;/li&gt;
&lt;li&gt;Make Pyglet listen to the left and right arrow keys and shifts the Mega Man accordingly&lt;/li&gt;
&lt;li&gt;Let Pyglet update the ball position every time the clock ticks&lt;/li&gt;
&lt;li&gt;Add a Game class that saves the “state of the game”. I’ll explain this later. OOP rocks!&lt;/li&gt;
&lt;li&gt;Refactor the code to use a Game object for updating the Mega Man position and the ball position&lt;/li&gt;
&lt;li&gt;Add the logic to detect and handle collision between Mega Man and the ball&lt;/li&gt;
&lt;li&gt;Add the score label and the score logic&lt;/li&gt;
&lt;li&gt;Done!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My git repo is here: https://github.com/dawran6/pyglet-tutorial/blob/master/megaman.py.
The code is less than 100 lines so it shouldn’t be hard to
follow even though I didn’t put too much thought on the structure.
Like the famous quote says: “&lt;strong&gt;&lt;em&gt;if your first product does not embarrass you,
you are shipping it too late.&lt;/em&gt;&lt;/strong&gt;”
Leave me comments or tweet me @randydliou if you have any thought want to share.&lt;/p&gt;
&lt;p&gt;Come back to the step number 6 above.
There’re some good reasons to have a game state class defined in the code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You don’t need to declare global variable everywhere.&lt;/strong&gt;
I don’t like global variables. They make my code harder to maintain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Games are full of states that need to be tracked and
it’s a good idea to wrap those together for clarity.&lt;/strong&gt;
In my case, the states I am tracking is the position of Mega Man,
the position of the ball, the score, and if the game is terminated.
If the game gets bigger with more objects on the window, this list could increase a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it! It was a very entertaining and accomplishing experience. I had a lot of fun trying out something new. I think Pyglet did a pretty decent job maintain their documentation. It wasn’t hard for me to find the information that I needed. Highly recommend to give it a try if you’ve never done game programming before!&lt;/p&gt;</summary><category term="python"></category><category term="game"></category></entry><entry><title>How I wake up 2 hours earlier every day and become happier</title><link href="http://dawranliou.com/how-i-wake-up-2-hours-earlier-every-day-and-become-happier.html" rel="alternate"></link><published>2016-01-27T10:20:00-08:00</published><updated>2016-01-27T10:20:00-08:00</updated><author><name>Daw-Ran Liou</name></author><id>tag:dawranliou.com,2016-01-27:how-i-wake-up-2-hours-earlier-every-day-and-become-happier.html</id><summary type="html">&lt;h2&gt;Here’s how I kick off my workdays&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;6:00 AM:
the alarm went off.
I allowed myself to stay in bed 5 more minutes to
skim through my phone notifications and
got up to do the 8 mins abs workout on my yoga mat.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;6:15 AM:
I went to the bathroom to take a hot shower,
and 5 minutes later, was looking in the mirror brushing
my teeth (and also do some other stuffs I can do
without clothes in the bathroom, like, shaving.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;6:40 AM:
I drizzled some oil on the hot pan and started
frying an egg for my power breakfast.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;7:00 AM:
took a moment to enjoy my power breakfast with
a cup of fresh made pour over coffee. (Mmmmmmm.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;7:15 AM:
sit back at my desk and started my morning learning session.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;9:00 AM:
time to hit the road! Great, the traffic is calmer now.
I shall be in the office by 9:50.
[Press the play button on my favorite Podcast]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was nothing like the person described above at all three months ago.
What I’d like to tell you is the story of &lt;strong&gt;the routine I used to do
three months ago&lt;/strong&gt; and &lt;strong&gt;what happens after adopting my new routine.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;A little bit story about myself.
I’m a software developer working in the San Francisco Bay Area.
Like lots of people based in the Bay Area, we commutes!
And a lot!
The commute between my office and my place without traffic is
around 45 minutes oneway.
However, if you happen to be courageous enough to go on highway
during rush hour, guess what,
45 minutes is the time you spend stuck in the traffic with the
speed a dog can easily walk pass you.&lt;/p&gt;
&lt;h2&gt;My old routine&lt;/h2&gt;
&lt;p&gt;The traffic is bad, so what? I avoid them.
To hit the road at 9 AM, I used to wake up 8:30 in the morning and
rushed out my door without eating breakfast.
Like everyone else who enjoys sleeping and believe me I still am,
I need at least 7 hours of sleep every day in order to gain enough
energy for a day of work plus my noon workout routine (this is another story).
So at this period of time, I went to bed around 1 AM, typically.&lt;/p&gt;
&lt;p&gt;Now looking back, I was consistently feeling pressures from
work and life because I felt my free time was shrinking so much by the commute.
Quite often I found myself working in my off time and
tended to stay up late just to get more free time for work and myself.
This system wasn’t working right for me.&lt;/p&gt;
&lt;h2&gt;The motivation&lt;/h2&gt;
&lt;p&gt;I don’t have any legit reason to set up my mind for this change.
It’s just one day I came up the crazy idea:
“I’m going to challenge myself to wake up at 6 everyday for
21 days in a row because it sounds a healthy thing to do.”
Just kidding, I was first inspired by this YouTube video —
&lt;a href="https://www.youtube.com/watch?v=jjDmhNBtEfU"&gt;How To Develop A Kick Ass Morning Routine | 5 Tips For Starting Your Day&lt;/a&gt;
. This video help me to gather some great ideas to design
my morning routine from this video.
I also made a mental note that if the challenge was completed,
I’ll hang on to it and see how long could the streak goes on. (It’s 81 days BTW.)&lt;/p&gt;
&lt;h2&gt;My challenge started&lt;/h2&gt;
&lt;p&gt;In order to get enough sleep,
I forced myself to go to bed earlier than before at 11 PM.
Like most challenges, &lt;strong&gt;you gotta push yourself and hang in there!&lt;/strong&gt;
The hardest part for me was the weekends.
While still going out late with friends I still need to wake up at 6
the next day because I don’t want to fail the challenge.
On the craziest weekend I was partying out till 3 AM for
two days in a row and still manage to go on a snowboard trip on the third day.
Man, good old days.&lt;/p&gt;
&lt;p&gt;In order to get to bed by 11,
I made one of the best decisions ever since working —
not working after work hours.
Why?
Because I don’t have time after work anymore.
On a normal day, I took off at 7 and get home by 8.
After dinner, doing the dishes, cleaning up here and there,
and maybe some video games, it’s almost 10 PM.
Doing any sort of work an hour before sleep will
cause my brain not wanting go to bed in time.
Plus, with my extra 2 hours in the next morning I could catch them up later.
Someone would call me if it is THAT urgent.
My sleep quality boosted so much ever since.&lt;/p&gt;
&lt;p&gt;In the morning, I’d do a quick workout, any sort of workout.
Since I’m already keeping a regular workout everyday at lunch time,
I found the best workout I could do is for my abs.
I tend to skip abs in my regular noon workout easily so
why not tackle it the first thing in the morning?
The last line sounds like an awesome gym motivation quote. Cool. [Self-five]&lt;/p&gt;
&lt;p&gt;About my power breakfast,
there are three building blocks: proteins, carbs, and fruits.
An example of my breakfast is english muffin with a fried egg,
2 slices of turkey breasts, lettuce, half of a avocado,
lean cream cheese and 2 kiwis.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More energy&lt;/strong&gt; —
I don’t have any scientific fact to back me up but
I feel much more energetic even with the same amount of sleep.
Rarely do I feel sleepy during the workday now
(except when my workout at noon is too intense.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More time on the right tasks&lt;/strong&gt; —
Instead of stuck in the traffic,
now I’m using the best part of my entire day (morning!)
to on the most valuable thing — learning (sometimes some urgent work).
Driving is just a break before working.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Less pressure&lt;/strong&gt; —
Instead of dealing with work late at night,
dealing them in the morning gives me much more control of time and
less pressure by the time I go to bed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Healthier&lt;/strong&gt; — I’m eating proper breakfast everyday!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;To sum up all above, I’m a happier developer now!&lt;/strong&gt;&lt;/p&gt;</summary><category term="life-style"></category></entry></feed>